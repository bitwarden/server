{
  "configuration" : { },
  "description" : "Description",
  "documentation" : {
    "sections" : [ {
      "content" : "## File Hierarchy\n",
      "filename" : "file_hierarchy.md",
      "format" : "Markdown",
      "order" : 1,
      "title" : ""
    }, {
      "content" : "## Perspectives\n\n### Security\nHighlights models and relationships identified as a part of [threat modeling](https://www.threatmodelingmanifesto.org/).\n\nIdentified threats are expected to be itemized in the perspective description, tagged with an appropriate `Security: threat` tag, and include a `!docs` property that describes the threat and mitigations. [`-> (relationships)`](https://docs.structurizr.com/dsl/language#relationship) do not allow for a `!docs` property, so a `url` property is used instead, linking to the appropriate section of the published docs.\n\n#### Example Model or Relationship\n\n##### Example Threat\n\n- **Type**: type\n- **Priority**: TBD/Low/Medium/High/Critical\n- **Likelihood**: TBD/Low/Medium/High/Critical\n- **Impact**: TBD/Low/Medium/High/Critical\n\ndescription of the threat.\n\n###### Example Threat Mitigations\ndescribe the mitigations for the threat and whether or not they are complete\n\n\n### SRE\n\nHighlights concerns and requirements for cloud deployments.\n",
      "filename" : "perspectives.md",
      "format" : "Markdown",
      "order" : 2,
      "title" : ""
    }, {
      "content" : "## Tags\n\n### Admin\n### API\n### Auth\n### Azure\n### Billing\n### Bitwarden Employee\n### Browser\n### CLI\n### Cloud Host Requirement\n### Database\n### Desktop\n### Directory\n### Events\n### External\n### HealthCheck\n### Icons\n### LDAP\n### MSP\n### Mobile\n### Queue\n### SCIM\n### Security:Privacy\n### Self-Hosted\n### Web\n",
      "filename" : "tags.md",
      "format" : "Markdown",
      "order" : 3,
      "title" : ""
    } ]
  },
  "id" : 1,
  "lastModifiedAgent" : "structurizr-ui",
  "lastModifiedDate" : "2025-07-29T20:53:16Z",
  "model" : {
    "people" : [ {
      "description" : "An end user of the Bitwarden System",
      "id" : "1",
      "location" : "Unspecified",
      "name" : "Bitwarden User",
      "properties" : {
        "structurizr.dsl.identifier" : "user"
      },
      "relationships" : [ {
        "description" : "Uses",
        "destinationId" : "16",
        "id" : "96",
        "sourceId" : "1",
        "tags" : "Relationship"
      }, {
        "description" : "Uses",
        "destinationId" : "15",
        "id" : "97",
        "linkedRelationshipId" : "96",
        "sourceId" : "1"
      }, {
        "description" : "Uses",
        "destinationId" : "17",
        "id" : "98",
        "sourceId" : "1",
        "tags" : "Relationship"
      }, {
        "description" : "Uses",
        "destinationId" : "18",
        "id" : "99",
        "sourceId" : "1",
        "tags" : "Relationship"
      }, {
        "description" : "Uses",
        "destinationId" : "19",
        "id" : "100",
        "sourceId" : "1",
        "tags" : "Relationship"
      }, {
        "description" : "Uses",
        "destinationId" : "20",
        "id" : "101",
        "sourceId" : "1",
        "tags" : "Relationship"
      }, {
        "description" : "Uses",
        "destinationId" : "21",
        "id" : "102",
        "sourceId" : "1",
        "tags" : "Relationship"
      } ],
      "tags" : "Element,Person"
    }, {
      "description" : "Either a Bitwarden site-reliability engineer or administrator of a self-hosted instance",
      "id" : "2",
      "location" : "Unspecified",
      "name" : "System Admin",
      "properties" : {
        "structurizr.dsl.identifier" : "system_admin"
      },
      "relationships" : [ {
        "description" : "Administers System",
        "destinationId" : "9",
        "id" : "111",
        "sourceId" : "2",
        "tags" : "Relationship"
      }, {
        "description" : "Administers System",
        "destinationId" : "4",
        "id" : "112",
        "linkedRelationshipId" : "111",
        "sourceId" : "2"
      } ],
      "tags" : "Element,Person,Bitwarden Employee,Self-Host Admin"
    }, {
      "description" : "A customer success engineer. Inspects bitwarden state through the admin portal and internal tools",
      "group" : "Bitwarden Controlled",
      "id" : "3",
      "location" : "Unspecified",
      "name" : "Customer Success",
      "properties" : {
        "structurizr.dsl.identifier" : "customer_success"
      },
      "relationships" : [ {
        "description" : "Inspects and supports",
        "destinationId" : "9",
        "id" : "109",
        "sourceId" : "3",
        "tags" : "Relationship"
      }, {
        "description" : "Inspects and supports",
        "destinationId" : "4",
        "id" : "110",
        "linkedRelationshipId" : "109",
        "sourceId" : "3"
      } ],
      "tags" : "Element,Person,Bitwarden Employee"
    }, {
      "description" : "An administrator of an organization",
      "id" : "25",
      "location" : "Unspecified",
      "name" : "Organization Admin",
      "properties" : {
        "structurizr.dsl.identifier" : "admin"
      },
      "relationships" : [ {
        "description" : "Administers Organizations",
        "destinationId" : "16",
        "id" : "103",
        "sourceId" : "25",
        "tags" : "Relationship"
      }, {
        "description" : "Administers Organizations",
        "destinationId" : "15",
        "id" : "104",
        "linkedRelationshipId" : "103",
        "sourceId" : "25"
      } ],
      "tags" : "Element,Person,Admin"
    }, {
      "description" : "And employee of a managed service provider",
      "id" : "26",
      "location" : "Unspecified",
      "name" : "MSP",
      "properties" : {
        "structurizr.dsl.identifier" : "provider"
      },
      "relationships" : [ {
        "description" : "Completes Provider registration with",
        "destinationId" : "9",
        "id" : "105",
        "sourceId" : "26",
        "tags" : "Relationship"
      }, {
        "description" : "Completes Provider registration with",
        "destinationId" : "4",
        "id" : "106",
        "linkedRelationshipId" : "105",
        "sourceId" : "26"
      }, {
        "description" : "Administers Providers and Organizations",
        "destinationId" : "16",
        "id" : "107",
        "sourceId" : "26",
        "tags" : "Relationship"
      }, {
        "description" : "Administers Providers and Organizations",
        "destinationId" : "15",
        "id" : "108",
        "linkedRelationshipId" : "107",
        "sourceId" : "26"
      } ],
      "tags" : "Element,Person,MSP"
    } ],
    "properties" : {
      "structurizr.groupSeparator" : "/"
    },
    "softwareSystems" : [ {
      "containers" : [ {
        "components" : [ {
          "documentation" : { },
          "id" : "6",
          "name" : "Billing",
          "properties" : {
            "structurizr.dsl.identifier" : "server.api.billing"
          },
          "relationships" : [ {
            "description" : "Requests payments for customers",
            "destinationId" : "76",
            "id" : "242",
            "sourceId" : "6",
            "tags" : "Relationship"
          }, {
            "description" : "Requests payments for customers",
            "destinationId" : "77",
            "id" : "245",
            "sourceId" : "6",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component,Billing"
        } ],
        "documentation" : { },
        "id" : "5",
        "name" : "API",
        "properties" : {
          "structurizr.dsl.identifier" : "server.api"
        },
        "relationships" : [ {
          "description" : "Validates JWTs with",
          "destinationId" : "74",
          "id" : "133",
          "sourceId" : "5",
          "tags" : "Relationship",
          "url" : "https://bitwarden.com"
        }, {
          "description" : "Queries",
          "destinationId" : "11",
          "id" : "135",
          "sourceId" : "5",
          "tags" : "Relationship"
        }, {
          "description" : "Sends events to",
          "destinationId" : "12",
          "id" : "137",
          "sourceId" : "5",
          "tags" : "Relationship"
        }, {
          "description" : "Sends emails to",
          "destinationId" : "13",
          "id" : "139",
          "sourceId" : "5",
          "tags" : "Relationship"
        }, {
          "description" : "Sends notifications to",
          "destinationId" : "14",
          "id" : "140",
          "sourceId" : "5",
          "tags" : "Relationship"
        }, {
          "description" : "Sends events to",
          "destinationId" : "31",
          "id" : "147",
          "sourceId" : "5",
          "tags" : "Relationship"
        }, {
          "description" : "Sends events to",
          "destinationId" : "30",
          "id" : "148",
          "linkedRelationshipId" : "147",
          "sourceId" : "5"
        }, {
          "description" : "Sends events to",
          "destinationId" : "41",
          "id" : "151",
          "sourceId" : "5",
          "tags" : "Relationship"
        }, {
          "description" : "Sends events to",
          "destinationId" : "40",
          "id" : "152",
          "linkedRelationshipId" : "151",
          "sourceId" : "5"
        }, {
          "description" : "Requests payments for customers",
          "destinationId" : "76",
          "id" : "243",
          "linkedRelationshipId" : "242",
          "sourceId" : "5"
        }, {
          "description" : "Requests payments for customers",
          "destinationId" : "77",
          "id" : "246",
          "linkedRelationshipId" : "245",
          "sourceId" : "5"
        } ],
        "tags" : "Element,Container,API"
      }, {
        "components" : [ {
          "description" : "Handles all events, passing them off to the IEventWriteService with the `persistent` key for long term storage.",
          "documentation" : { },
          "id" : "61",
          "name" : "EventRepositoryHandler",
          "properties" : {
            "structurizr.dsl.identifier" : "server.events.event_repository_handler"
          },
          "tags" : "Element,Component"
        }, {
          "description" : "Fetches the relevent configurations when an event comes in and hands the event to its paired integration handler for processing.",
          "documentation" : { },
          "id" : "62",
          "name" : "EventIntegrationHandler",
          "properties" : {
            "structurizr.dsl.identifier" : "server.events.event_integration_handler"
          },
          "relationships" : [ {
            "description" : "Publishes To",
            "destinationId" : "42",
            "id" : "211",
            "sourceId" : "62",
            "tags" : "Relationship"
          }, {
            "description" : "Publishes To",
            "destinationId" : "40",
            "id" : "212",
            "linkedRelationshipId" : "211",
            "sourceId" : "62"
          } ],
          "tags" : "Element,Component"
        }, {
          "description" : "Processes Slack IntegrationMessages, posting them to the configured channels.",
          "documentation" : { },
          "id" : "63",
          "name" : "SlackIntegrationHandler",
          "properties" : {
            "structurizr.dsl.identifier" : "server.events.slack_integration_handler"
          },
          "tags" : "Element,Component"
        }, {
          "description" : "Processes Webhook and HEC IntegrationMessages, posting them to the configured URI.",
          "documentation" : { },
          "id" : "64",
          "name" : "WebhookIntegrationHandler",
          "properties" : {
            "structurizr.dsl.identifier" : "server.events.webhook_integration_handler"
          },
          "tags" : "Element,Component"
        }, {
          "description" : "Caches all configurations for integrations in memory so that events can be handled without adding database load.",
          "documentation" : { },
          "id" : "65",
          "name" : "IntegrationConfigurationDetailsCacheService",
          "properties" : {
            "structurizr.dsl.identifier" : "server.events.integration_configuration_details_cache_service"
          },
          "tags" : "Element,Component"
        }, {
          "description" : "Handles all API interaction with Slack.",
          "documentation" : { },
          "id" : "66",
          "name" : "SlackService",
          "properties" : {
            "structurizr.dsl.identifier" : "server.events.slack_service"
          },
          "tags" : "Element,Component"
        }, {
          "description" : "Performs any Http functions for Webhooks / HEC.",
          "documentation" : { },
          "id" : "67",
          "name" : "HttpClient",
          "properties" : {
            "structurizr.dsl.identifier" : "server.events.http_client"
          },
          "tags" : "Element,Component"
        }, {
          "description" : "Processes filters from configurations to determine if an event should be processed out to the integration.",
          "documentation" : { },
          "id" : "68",
          "name" : "IntegrationFilterService",
          "properties" : {
            "structurizr.dsl.identifier" : "server.events.integration_filter_service"
          },
          "tags" : "Element,Component"
        } ],
        "documentation" : { },
        "id" : "7",
        "name" : "Events",
        "properties" : {
          "structurizr.dsl.identifier" : "server.events"
        },
        "relationships" : [ {
          "description" : "Sends events to",
          "destinationId" : "12",
          "id" : "138",
          "sourceId" : "7",
          "tags" : "Relationship"
        }, {
          "description" : "Sends events to",
          "destinationId" : "31",
          "id" : "149",
          "sourceId" : "7",
          "tags" : "Relationship"
        }, {
          "description" : "Sends events to",
          "destinationId" : "30",
          "id" : "150",
          "linkedRelationshipId" : "149",
          "sourceId" : "7"
        }, {
          "description" : "Sends events to",
          "destinationId" : "41",
          "id" : "153",
          "sourceId" : "7",
          "tags" : "Relationship"
        }, {
          "description" : "Sends events to",
          "destinationId" : "40",
          "id" : "154",
          "linkedRelationshipId" : "153",
          "sourceId" : "7"
        }, {
          "description" : "Publishes To",
          "destinationId" : "42",
          "id" : "213",
          "linkedRelationshipId" : "211",
          "sourceId" : "7"
        } ],
        "tags" : "Element,Container,Events"
      }, {
        "documentation" : { },
        "id" : "8",
        "name" : "Notifications",
        "properties" : {
          "structurizr.dsl.identifier" : "server.notifications"
        },
        "relationships" : [ {
          "description" : "Sends notifications to",
          "destinationId" : "14",
          "id" : "141",
          "sourceId" : "8",
          "tags" : "Relationship"
        } ],
        "tags" : "Element,Container"
      }, {
        "documentation" : { },
        "id" : "9",
        "name" : "Bitwarden Portal",
        "properties" : {
          "structurizr.dsl.identifier" : "server.portal"
        },
        "relationships" : [ {
          "description" : "Queries",
          "destinationId" : "11",
          "id" : "136",
          "sourceId" : "9",
          "tags" : "Relationship"
        } ],
        "tags" : "Element,Container,Web"
      }, {
        "components" : [ {
          "description" : "Handles all events, passing them off to the IEventWriteService with the `persistent` key for long term storage.",
          "documentation" : { },
          "id" : "53",
          "name" : "EventRepositoryHandler",
          "properties" : {
            "structurizr.dsl.identifier" : "server.events_processor.event_repository_handler"
          },
          "relationships" : [ {
            "destinationId" : "11",
            "id" : "181",
            "sourceId" : "53",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component"
        }, {
          "description" : "Fetches the relevent configurations when an event comes in and hands the event to its paired integration handler for processing.",
          "documentation" : { },
          "id" : "54",
          "name" : "EventIntegrationHandler",
          "properties" : {
            "structurizr.dsl.identifier" : "server.events_processor.event_integration_handler"
          },
          "relationships" : [ {
            "description" : "Publishes To",
            "destinationId" : "32",
            "id" : "173",
            "sourceId" : "54",
            "tags" : "Relationship"
          }, {
            "description" : "Publishes To",
            "destinationId" : "30",
            "id" : "174",
            "linkedRelationshipId" : "173",
            "sourceId" : "54"
          }, {
            "description" : "Fetches configurations from",
            "destinationId" : "57",
            "id" : "177",
            "sourceId" : "54",
            "tags" : "Relationship"
          }, {
            "description" : "Runs filters",
            "destinationId" : "60",
            "id" : "180",
            "sourceId" : "54",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component"
        }, {
          "description" : "Processes Slack IntegrationMessages, posting them to the configured channels.",
          "documentation" : { },
          "id" : "55",
          "name" : "SlackIntegrationHandler",
          "properties" : {
            "structurizr.dsl.identifier" : "server.events_processor.slack_integration_handler"
          },
          "relationships" : [ {
            "description" : "Uses",
            "destinationId" : "58",
            "id" : "222",
            "sourceId" : "55",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component"
        }, {
          "description" : "Processes Webhook and HEC IntegrationMessages, posting them to the configured URI.",
          "documentation" : { },
          "id" : "56",
          "name" : "WebhookIntegrationHandler",
          "properties" : {
            "structurizr.dsl.identifier" : "server.events_processor.webhook_integration_handler"
          },
          "relationships" : [ {
            "description" : "Uses",
            "destinationId" : "59",
            "id" : "229",
            "sourceId" : "56",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component"
        }, {
          "description" : "Caches all configurations for integrations in memory so that events can be handled without adding database load.",
          "documentation" : { },
          "id" : "57",
          "name" : "IntegrationConfigurationDetailsCacheService",
          "properties" : {
            "structurizr.dsl.identifier" : "server.events_processor.integration_configuration_details_cache_service"
          },
          "relationships" : [ {
            "description" : "Fetches configurations from",
            "destinationId" : "11",
            "id" : "178",
            "sourceId" : "57",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component"
        }, {
          "description" : "Handles all API interaction with Slack.",
          "documentation" : { },
          "id" : "58",
          "name" : "SlackService",
          "properties" : {
            "structurizr.dsl.identifier" : "server.events_processor.slack_service"
          },
          "relationships" : [ {
            "description" : "Publishes configured events to",
            "destinationId" : "70",
            "id" : "223",
            "sourceId" : "58",
            "tags" : "Relationship"
          }, {
            "description" : "Publishes configured events to",
            "destinationId" : "69",
            "id" : "224",
            "linkedRelationshipId" : "223",
            "sourceId" : "58"
          } ],
          "tags" : "Element,Component"
        }, {
          "description" : "Performs any Http functions for Webhooks / HEC.",
          "documentation" : { },
          "id" : "59",
          "name" : "HttpClient",
          "properties" : {
            "structurizr.dsl.identifier" : "server.events_processor.http_client"
          },
          "relationships" : [ {
            "description" : "Publishes configured events to",
            "destinationId" : "73",
            "id" : "230",
            "sourceId" : "59",
            "tags" : "Relationship"
          }, {
            "description" : "Publishes configured events to",
            "destinationId" : "69",
            "id" : "231",
            "linkedRelationshipId" : "230",
            "sourceId" : "59"
          }, {
            "description" : "Publishes configured events to",
            "destinationId" : "72",
            "id" : "234",
            "sourceId" : "59",
            "tags" : "Relationship"
          }, {
            "description" : "Publishes configured events to",
            "destinationId" : "71",
            "id" : "237",
            "sourceId" : "59",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component"
        }, {
          "description" : "Processes filters from configurations to determine if an event should be processed out to the integration.",
          "documentation" : { },
          "id" : "60",
          "name" : "IntegrationFilterService",
          "properties" : {
            "structurizr.dsl.identifier" : "server.events_processor.integration_filter_service"
          },
          "tags" : "Element,Component"
        } ],
        "documentation" : {
          "sections" : [ {
            "content" : "## Design goals\n\nThe main goal of event integrations is to easily enable adding new integrations over time without the need\nfor a lot of custom work to expose events to a new integration. The ability of fan-out offered by AMQP\n(either in RabbitMQ or in Azure Service Bus) gives us a way to attach any number of new integrations to the\nexisting event system without needing to add special handling. By adding a new listener to the existing\npipeline, it gains an independent stream of events without the need for additional broadcast code.\n\nWe want to enable robust handling of failures and retries. By utilizing the two-tier approach\n([described below](#two-tier-exchange)), we build in support at the service level for retries. When we add\nnew integrations, they can focus solely on the integration-specific logic and reporting status, with all the\nprocess of retries and delays managed by the messaging system.\n\nAnother goal is to not only support this functionality in the cloud version, but offer it as well to\nself-hosted instances. RabbitMQ provides a lightweight way for self-hosted instances to tie into the event system\nusing the same robust architecture for integrations without the need for Azure Service Bus.\n\nFinally, we want to offer organization admins flexibility and control over what events are significant, where\nto send events, and the data to be included in the message. The configuration architecture allows Organizations\nto customize details of a specific integration; see [Integrations and integration\nconfigurations](#integrations-and-integration-configurations) below for more details on the configuration piece.\n\n## Architecture\n\nThe entry point for the event integrations is the `IEventWriteService`. By configuring the\n`EventIntegrationEventWriteService` as the `EventWriteService`, all events sent to the\nservice are broadcast on the RabbitMQ or Azure Service Bus message exchange. To abstract away\nthe specifics of publishing to a specific AMQP provider, an `IEventIntegrationPublisher`\nis injected into `EventIntegrationEventWriteService` to handle the publishing of events to the\nRabbitMQ or Azure Service Bus service.\n\n### Two-tier exchange\n\nWhen `EventIntegrationEventWriteService` publishes, it posts to the first tier of our two-tier\napproach to handling messages. Each tier is represented in the AMQP stack by a separate exchange\n(in RabbitMQ terminology) or topic (in Azure Service Bus).\n\nSee the [EventsProcessor / ASB detailed diagram](/diagrams#Events_Processor_Azure_Service_Bus) for mote info.\n\n#### Event tier\n\nIn the first tier, events are broadcast in a fan-out to a series of listeners. The message body\nis a JSON representation of an individual `EventMessage` or an array of `EventMessage`. Handlers at\nthis level are responsible for handling each event or array of events. There are currently two handlers\nat this level:\n- `EventRepositoryHandler`\n    - The `EventRepositoryHandler` is responsible for long term storage of events. It receives all events\n      and  stores them via an injected `IEventRepository` into the database.\n    - This mirrors the behavior of when event integrations are turned off - cloud stores to Azure Tables\n      and self-hosted is stored to the database.\n- `EventIntegrationHandler`\n    - The `EventIntegrationHandler` is a generic class that is customized to each integration (via the\n      configuration details of the integration) and is responsible for determining if there's a configuration\n      for this event / organization / integration, fetching that configuration, and parsing the details of the\n      event into a template string.\n    - The `EventIntegrationHandler` uses the injected `IOrganizationIntegrationConfigurationRepository` to pull\n      the specific set of configuration and template based on the event type, organization, and integration type.\n      This configuration is what determines if an integration should be sent, what details are necessary for sending\n      it, and the actual message to send.\n    - The output of `EventIntegrationHandler` is a new `IntegrationMessage`, with the details of this\n      the configuration necessary to interact with the integration and the message to send (with all the event\n      details incorporated), published to the integration level of the message bus.\n\n#### Integration tier\n\nAt the integration level, messages are JSON representations of `IIntegrationMessage` - specifically they\nwill be concrete types of the generic `IntegrationMessage<T>` where `<T>` is the configuration details of the\nspecific integration for which they've been sent. These messages represent the details required for\nsending a specific event to a specific integration, including handling retries and delays.\n\nHandlers at the integration level are tied directly to the integration (e.g. `SlackIntegrationHandler`,\n`WebhookIntegrationHandler`). These handlers take in `IntegrationMessage<T>` and output\n`IntegrationHandlerResult`, which tells the listener the outcome of the integration (e.g. success / fail,\nif it can be retried and any minimum delay that should occur). This makes them easy to unit test in isolation\nwithout any of the concerns of AMQP or messaging.\n\nThe listeners at this level are responsible for firing off the handler when a new message comes in and then\ntaking the correct action based on the result. Successful results simply acknowledge the message and resolve.\nFailures will either be sent to the dead letter queue (DLQ) or re-published for retry after the correct amount of delay.\n\n#### Retries\n\nOne of the goals of introducing the integration level is to simplify and enable the process of multiple retries\nfor a specific event integration. For instance, if a service is temporarily down, we don't want one of our handlers\nblocking the rest of the queue while it waits to retry. In addition, we don't want to retry _all_ integrations for a\nspecific event if only one integration fails nor do we want to re-lookup the configuration details. By splitting\nout the `IntegrationMessage<T>` with the configuration, message, and details around retries, we can process each\nevent / integration individually and retry easily.\n\nWhen the `IntegrationHandlerResult.Success` is set to `false` (indicating that the integration attempt failed) the\n`Retryable` flag tells the listener whether this failure is temporary or final. If the `Retryable` is `false`, then\nthe message is immediately sent to the DLQ. If it is `true`, the listener uses the `ApplyRetry(DateTime)` method\nin `IntegrationMessage` which handles both incrementing the `RetryCount` and updating the `DelayUntilDate` using\nthe provided DateTime, but also adding exponential backoff (based on `RetryCount`) and jitter. The listener compares\nthe `RetryCount` in the `IntegrationMessage` to see if it's over the `MaxRetries` defined in Global Settings. If it\nis over the `MaxRetries`, the message is sent to the DLQ. Otherwise, it is scheduled for retry.\n\n``` mermaid\nflowchart TD\nA[Success == false] --> B{Retryable?}\n    B -- No --> C[Send to Dead Letter Queue DLQ]\n    B -- Yes --> D[Check RetryCount vs MaxRetries]\n    D -->|RetryCount >= MaxRetries| E[Send to Dead Letter Queue DLQ]\n    D -->|RetryCount < MaxRetries| F[Schedule for Retry]\n```\n\nAzure Service Bus supports scheduling messages as part of its core functionality. Retries are scheduled to a specific\ntime and then ASB holds the message and publishes it at the correct time.\n\n##### RabbitMQ retry options\n\nFor RabbitMQ (which will be used by self-host only), we have two different options. The `useDelayPlugin` flag in\n`GlobalSettings.RabbitMqSettings` determines which one is used. If it is set to `true`, we use the delay plugin. It\ndefaults to `false` which indicates we should use retry queues with a timing check.\n\n1. Delay plugin\n    - [Delay plugin GitHub repo](https://github.com/rabbitmq/rabbitmq-delayed-message-exchange)\n    - This plugin enables a delayed message exchange in RabbitMQ that supports delaying a message for an amount\n      of time specified in a special header.\n    - This allows us to forego using any retry queues and rely instead on the delay exchange. When a message is\n      marked with the header it gets published to the exchange and the exchange handles all the functionality of\n      holding it until the appropriate time (similar to ASB's built-in support).\n    - The plugin must be setup and enabled before turning this option on (which is why it defaults to off).\n\n2. Retry queues + timing check\n    - If the delay plugin setting is off, we push the message to a retry queue which has a fixed amount of time before\n      it gets re-published back to the main queue.\n    - When a message comes off the queue, we check to see if the `DelayUntilDate` has already passed.\n        - If it has passed, we then handle the integration normally and retry the request.\n        - If it is still in the future, we put the message back on the retry queue for an additional wait.\n    - While this does use extra processing, it gives us better support for honoring the delays even if the delay plugin\n      isn't enabled. Since this solution is only intended for self-host, it should be a pretty minimal impact with short\n      delays and a small number of retries.\n\n### Listener / Handler pattern\n\nTo make it easy to support multiple AMQP services (RabbitMQ and Azure Service Bus), the act\nof listening to the stream of messages is decoupled from the act of responding to a message.\n\n#### Listeners\n\n- Listeners handle the details of the communication platform (i.e. RabbitMQ and Azure Service Bus).\n- There is one listener for each platform (RabbitMQ / ASB) for each of the two levels - i.e. one event listener\n  and one integration listener.\n- Perform all the aspects of setup / teardown, subscription, message acknowledgement, etc. for the messaging platform,\n  but do not directly process any events themselves. Instead, they delegate to the handler with which they\n  are configured.\n- Multiple instances can be configured to run independently, each with its own handler and\n  subscription / queue.\n\n#### Handlers\n\n- One handler per queue / subscription (e.g. per integration at the integration level).\n- Completely isolated from and know nothing of the messaging platform in use. This allows them to be\n  freely reused across different communication platforms.\n- Perform all aspects of handling an event.\n- Allows them to be highly testable as they are isolated and decoupled from the more complicated\n  aspects of messaging.\n\nThis combination allows for a configuration inside of `ServiceCollectionExtensions.cs` that pairs\ninstances of the listener service for the currently running messaging platform with any number of\nhandlers. It also allows for quick development of new handlers as they are focused only on the\ntask of handling a specific event.\n\n### Publishers and Services\n\nListeners (and `EventIntegrationHandler`) interact with the messaging system via the `IEventPublisher` interface,\nwhich is backed by a RabbitMQ and ASB specific service. By placing most of the messaging platform details in the\nservice layer, we are able to handle common things like configuring the connection, binding or creating a specific\nqueue, etc. in one place. The `IRabbitMqService` and `IAzureServiceBusService` implement the `IEventPublisher`\ninterface and therefore can also handle directly all the message publishing functionality.\n\n### Integrations and integration configurations\n\nOrganizations can configure integration configurations to send events to different endpoints -- each\nhandler maps to a specific integration and checks for the configuration when it receives an event.\nCurrently, there are integrations / handlers for Slack, webhooks, and HTTP Event Collector (HEC).\n\n#### `OrganizationIntegration`\n\n- The top-level object that enables a specific integration for the organization.\n- Includes any properties that apply to the entire integration across all events.\n    - For Slack, it consists of the token: `{ \"Token\": \"xoxb-token-from-slack\" }`.\n    - For webhooks, it is optional. Webhooks can either be configured at this level or the configuration level,\n      but the configuration level takes precedence. However, even though it is optional, an organization must\n      have a webhook `OrganizationIntegration` (even will a `null` `Configuration`) to enable configuration\n      via `OrganizationIntegrationConfiguration`.\n    - For HEC, it consists of the scheme, token, and URI:\n\n```json\n    {\n      \"Scheme\": \"Bearer\",\n      \"Token\": \"Auth-token-from-HEC-service\",\n      \"Uri\": \"https://example.com/api\"\n    }\n```\n\n#### `OrganizationIntegrationConfiguration`\n\n- This contains the configurations specific to each `EventType` for the integration.\n- `Configuration` contains the event-specific configuration.\n    - For Slack, this would contain what channel to send the message to: `{ \"channelId\": \"C123456\" }`\n    - For webhooks, this is the URL the request should be sent to: `{ \"url\": \"https://api.example.com\" }`\n        - Optionally this also can include a `Scheme` and `Token` if this webhook needs Authentication.\n        - As stated above, all of this information can be specified here or at the `OrganizationIntegration`\n          level, but any properties declared here will take precedence over the ones above.\n    - For HEC, this must be null. HEC is configured only at the `OrganizationIntegration` level.\n- `Template` contains a template string that is expected to be filled in with the contents of the actual event.\n    - The tokens in the string are wrapped in `#` characters. For instance, the UserId would be `#UserId#`.\n    - The `IntegrationTemplateProcessor` does the actual work of replacing these tokens with introspected values from\n      the provided `EventMessage`.\n    - The template does not enforce any structure — it could be a freeform text message to send via Slack, or a\n      JSON body to send via webhook; it is simply stored and used as a string for the most flexibility.\n\n#### `OrganizationIntegrationConfigurationDetails`\n\n- This is the combination of both the `OrganizationIntegration` and `OrganizationIntegrationConfiguration` into\n  a single object. The combined contents tell the integration's handler all the details needed to send to an\n  external service.\n- `OrganizationIntegrationConfiguration` takes precedence over `OrganizationIntegration` - any keys present in\n  both will receive the value declared in `OrganizationIntegrationConfiguration`.\n- An array of `OrganizationIntegrationConfigurationDetails` is what the `EventIntegrationHandler` fetches from\n  the database to determine what to publish at the integration level.\n\n### Filtering\n\nIn addition to the ability to configure integrations mentioned above, organization admins can\nalso add `Filters` stored in the `OrganizationIntegrationConfiguration`. Filters are completely\noptional and as simple or complex as organization admins want to make them. These are stored in\nthe database as JSON and serialized into an `IntegrationFilterGroup`. This is then passed to\nthe `IntegrationFilterService`, which evaluates it to a `bool`. If it's `true`, the integration\nproceeds as above. If it's `false`, we ignore this event and do not route it to the integration\nlevel.\n\n#### `IntegrationFilterGroup`\n\nLogical AND / OR grouping of a number of rules and other subgroups.\n\n| Property      | Description                                                                                                                                                                                                                                                                                                                                                      |\n|---------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `AndOperator` | Indicates whether **all** (`true`) or **any** (`false`) of the `Rules` and `Groups` must be true. This applies to _both_ the inner group and the list of rules; for instance, if this group contained Rule1 and Rule2 as well as Group1 and Group2:<br/><br/>`true`: `Rule1 && Rule2 && Group1 && Group2`<br>`false`: `Rule1 \\|\\| Rule2 \\|\\| Group1 \\|\\| Group2` |\n| `Rules`       | A list of `IntegrationFilterRule`. Can be null or empty, in which case it will return `true`.                                                                                                                                                                                                                                                                    |\n| `Groups`      | A list of nested `IntegrationFilterGroup`. Can be null or empty, in which case it will return `true`.                                                                                                                                                                                                                                                            |\n\n#### `IntegrationFilterRule`\n\nThe core of the filtering framework to determine if the data in this specific EventMessage\nmatches the data for which the filter is searching.\n\n| Property    | Description                                                                                                                                                                                                                                                 |\n|-------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `Property`  | The property on `EventMessage` to evaluate (e.g., `CollectionId`).                                                                                                                                                                                          |\n| `Operation` | The comparison to perform between the property and `Value`. <br><br>**Supported operations:**<br>• `Equals`: `Guid` equals `Value`<br>• `NotEquals`: logical inverse of `Equals`<br>• `In`: `Guid` is in `Value` list<br>• `NotIn`: logical inverse of `In` |\n| `Value`     | The comparison value. Type depends on `Operation`: <br>• `Equals`, `NotEquals`: `Guid`<br>• `In`, `NotIn`: list of `Guid`                                                                                                                                   |\n",
            "format" : "Markdown",
            "order" : 1,
            "title" : ""
          } ]
        },
        "id" : "10",
        "name" : "Events Processor",
        "properties" : {
          "structurizr.dsl.identifier" : "server.events_processor"
        },
        "relationships" : [ {
          "description" : "Publishes To",
          "destinationId" : "32",
          "id" : "175",
          "linkedRelationshipId" : "173",
          "sourceId" : "10"
        }, {
          "description" : "Publishes To",
          "destinationId" : "30",
          "id" : "176",
          "linkedRelationshipId" : "173",
          "sourceId" : "10"
        }, {
          "description" : "Fetches configurations from",
          "destinationId" : "11",
          "id" : "179",
          "linkedRelationshipId" : "178",
          "sourceId" : "10"
        }, {
          "description" : "Publishes configured events to",
          "destinationId" : "70",
          "id" : "225",
          "linkedRelationshipId" : "223",
          "sourceId" : "10"
        }, {
          "description" : "Publishes configured events to",
          "destinationId" : "69",
          "id" : "226",
          "linkedRelationshipId" : "223",
          "sourceId" : "10"
        }, {
          "description" : "Publishes configured events to",
          "destinationId" : "73",
          "id" : "232",
          "linkedRelationshipId" : "230",
          "sourceId" : "10"
        }, {
          "description" : "Publishes configured events to",
          "destinationId" : "72",
          "id" : "235",
          "linkedRelationshipId" : "234",
          "sourceId" : "10"
        }, {
          "description" : "Publishes configured events to",
          "destinationId" : "71",
          "id" : "238",
          "linkedRelationshipId" : "237",
          "sourceId" : "10"
        } ],
        "tags" : "Element,Container,Events"
      }, {
        "documentation" : { },
        "id" : "11",
        "name" : "Database",
        "properties" : {
          "structurizr.dsl.identifier" : "server.database"
        },
        "tags" : "Element,Container,Database"
      }, {
        "documentation" : { },
        "id" : "12",
        "name" : "Events Queue",
        "properties" : {
          "structurizr.dsl.identifier" : "server.events_queue"
        },
        "relationships" : [ {
          "description" : "Processes events from",
          "destinationId" : "10",
          "id" : "142",
          "sourceId" : "12",
          "tags" : "Relationship"
        } ],
        "tags" : "Element,Container,Queue,Azure"
      }, {
        "documentation" : { },
        "id" : "13",
        "name" : "Mail Queue",
        "properties" : {
          "structurizr.dsl.identifier" : "server.mail_queue"
        },
        "relationships" : [ {
          "description" : "Processes emails from",
          "destinationId" : "9",
          "id" : "143",
          "sourceId" : "13",
          "tags" : "Relationship"
        } ],
        "tags" : "Element,Container,Queue,Azure"
      }, {
        "documentation" : { },
        "id" : "14",
        "name" : "Notifications Queue",
        "properties" : {
          "structurizr.dsl.identifier" : "server.notifications_queue"
        },
        "tags" : "Element,Container,Queue,Azure"
      }, {
        "documentation" : { },
        "id" : "27",
        "name" : "SCIM",
        "properties" : {
          "structurizr.dsl.identifier" : "server.scim"
        },
        "relationships" : [ {
          "description" : "Queries",
          "destinationId" : "11",
          "id" : "146",
          "sourceId" : "27",
          "tags" : "Relationship"
        } ],
        "tags" : "Element,Container,SCIM"
      }, {
        "components" : [ {
          "description" : "The main entry point for all events in the system. When an event occurs, it is published to this topic.",
          "documentation" : { },
          "id" : "31",
          "name" : "Event Topic",
          "properties" : {
            "structurizr.dsl.identifier" : "server.azure_service_bus.event_topic"
          },
          "relationships" : [ {
            "description" : "Fan-out Subscription",
            "destinationId" : "33",
            "id" : "155",
            "sourceId" : "31",
            "tags" : "Relationship"
          }, {
            "description" : "Fan-out Subscription",
            "destinationId" : "36",
            "id" : "156",
            "sourceId" : "31",
            "tags" : "Relationship"
          }, {
            "description" : "Fan-out Subscription",
            "destinationId" : "35",
            "id" : "157",
            "sourceId" : "31",
            "tags" : "Relationship"
          }, {
            "description" : "Fan-out Subscription",
            "destinationId" : "34",
            "id" : "158",
            "sourceId" : "31",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component,Events,ASB,Event Tier"
        }, {
          "description" : "Events that have integrations configured are processed and put on the integration topic with a routing key for their specific integration handler to process.",
          "documentation" : { },
          "id" : "32",
          "name" : "Integration Topic",
          "properties" : {
            "structurizr.dsl.identifier" : "server.azure_service_bus.integration_topic"
          },
          "relationships" : [ {
            "description" : "Subscription filtered via Slack key",
            "destinationId" : "37",
            "id" : "159",
            "sourceId" : "32",
            "tags" : "Relationship"
          }, {
            "description" : "Subscription filtered via Webhook key",
            "destinationId" : "38",
            "id" : "160",
            "sourceId" : "32",
            "tags" : "Relationship"
          }, {
            "description" : "Subscription filtered via HEC key",
            "destinationId" : "39",
            "id" : "161",
            "sourceId" : "32",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component,Events,ASB,Integrations,Integration Tier"
        }, {
          "description" : "Subscription for EventRepositoryHandler to write all events into azure table storage.",
          "documentation" : { },
          "id" : "33",
          "name" : "events-write-subscription",
          "properties" : {
            "structurizr.dsl.identifier" : "server.azure_service_bus.eventswritesub"
          },
          "relationships" : [ {
            "description" : "EventListenerService",
            "destinationId" : "53",
            "id" : "162",
            "sourceId" : "33",
            "tags" : "Relationship"
          }, {
            "description" : "EventListenerService",
            "destinationId" : "10",
            "id" : "163",
            "linkedRelationshipId" : "162",
            "sourceId" : "33"
          } ],
          "tags" : "Element,Component,ASB,Subscription,Event Tier"
        }, {
          "description" : "Subscription for slack-specific EventIntegrationHandler which publishes processed events to the integration tier if there is a Slack integration configured.",
          "documentation" : { },
          "id" : "34",
          "name" : "events-slack-subscription",
          "properties" : {
            "structurizr.dsl.identifier" : "server.azure_service_bus.eventsslacksub"
          },
          "relationships" : [ {
            "description" : "EventListenerService",
            "destinationId" : "54",
            "id" : "169",
            "sourceId" : "34",
            "tags" : "Relationship"
          }, {
            "description" : "EventListenerService",
            "destinationId" : "10",
            "id" : "170",
            "linkedRelationshipId" : "169",
            "sourceId" : "34"
          } ],
          "tags" : "Element,Component,ASB,Subscription,Event Tier,Slack"
        }, {
          "description" : "Subscription for webhook-specific EventIntegrationHandler which publishes processed events to the integration tier if there is a webhook integration configured.",
          "documentation" : { },
          "id" : "35",
          "name" : "events-webhook-subscription",
          "properties" : {
            "structurizr.dsl.identifier" : "server.azure_service_bus.eventswebhooksub"
          },
          "relationships" : [ {
            "description" : "EventListenerService",
            "destinationId" : "54",
            "id" : "171",
            "sourceId" : "35",
            "tags" : "Relationship"
          }, {
            "description" : "EventListenerService",
            "destinationId" : "10",
            "id" : "172",
            "linkedRelationshipId" : "171",
            "sourceId" : "35"
          } ],
          "tags" : "Element,Component,ASB,Subscription,Event Tier,Webhook"
        }, {
          "description" : "Subscription for HEC-specific EventIntegrationHandler which publishes processed events to the integration tier if there is a HEC integration configured.",
          "documentation" : { },
          "id" : "36",
          "name" : "events-hec-subscription",
          "properties" : {
            "structurizr.dsl.identifier" : "server.azure_service_bus.eventshecsub"
          },
          "relationships" : [ {
            "description" : "EventListenerService",
            "destinationId" : "54",
            "id" : "166",
            "sourceId" : "36",
            "tags" : "Relationship"
          }, {
            "description" : "EventListenerService",
            "destinationId" : "10",
            "id" : "167",
            "linkedRelationshipId" : "166",
            "sourceId" : "36"
          } ],
          "tags" : "Element,Component,ASB,Subscription,Event Tier,HEC"
        }, {
          "description" : "Integration-level subscription for Slack IntegrationMessages. Correlation filter: Label = 'slack'.",
          "documentation" : { },
          "id" : "37",
          "name" : "integration-slack-subscription",
          "properties" : {
            "structurizr.dsl.identifier" : "server.azure_service_bus.integrationslacksub"
          },
          "relationships" : [ {
            "description" : "IntegrationListenerService",
            "destinationId" : "55",
            "id" : "182",
            "sourceId" : "37",
            "tags" : "Relationship"
          }, {
            "description" : "IntegrationListenerService",
            "destinationId" : "10",
            "id" : "183",
            "linkedRelationshipId" : "182",
            "sourceId" : "37"
          } ],
          "tags" : "Element,Component,ASB,Subscription,Integration Tier,Slack"
        }, {
          "description" : "Integration-level subscription for Webhook IntegrationMessages. Correlation filter: Label = 'webhook'.",
          "documentation" : { },
          "id" : "38",
          "name" : "integration-webhook-subscription",
          "properties" : {
            "structurizr.dsl.identifier" : "server.azure_service_bus.integrationwebhooksub"
          },
          "relationships" : [ {
            "description" : "IntegrationListenerService",
            "destinationId" : "56",
            "id" : "185",
            "sourceId" : "38",
            "tags" : "Relationship"
          }, {
            "description" : "IntegrationListenerService",
            "destinationId" : "10",
            "id" : "186",
            "linkedRelationshipId" : "185",
            "sourceId" : "38"
          } ],
          "tags" : "Element,Component,ASB,Subscription,Integration Tier,Webhook"
        }, {
          "description" : "Integration-level subscription for HEC IntegrationMessages. Correlation filter: Label = 'hec'.",
          "documentation" : { },
          "id" : "39",
          "name" : "integration-hec-subscription",
          "properties" : {
            "structurizr.dsl.identifier" : "server.azure_service_bus.integrationhecsub"
          },
          "relationships" : [ {
            "description" : "IntegrationListenerService",
            "destinationId" : "56",
            "id" : "188",
            "sourceId" : "39",
            "tags" : "Relationship"
          }, {
            "description" : "IntegrationListenerService",
            "destinationId" : "10",
            "id" : "189",
            "linkedRelationshipId" : "188",
            "sourceId" : "39"
          } ],
          "tags" : "Element,Component,ASB,Subscription,Integration Tier,HEC"
        } ],
        "description" : "AMQP service used for pub/sub architecture for Events and Integrations",
        "documentation" : { },
        "id" : "30",
        "name" : "Azure Service Bus",
        "properties" : {
          "structurizr.dsl.identifier" : "server.azure_service_bus"
        },
        "relationships" : [ {
          "description" : "EventListenerService",
          "destinationId" : "53",
          "id" : "164",
          "linkedRelationshipId" : "162",
          "sourceId" : "30"
        }, {
          "description" : "EventListenerService",
          "destinationId" : "10",
          "id" : "165",
          "linkedRelationshipId" : "162",
          "sourceId" : "30"
        }, {
          "description" : "EventListenerService",
          "destinationId" : "54",
          "id" : "168",
          "linkedRelationshipId" : "166",
          "sourceId" : "30"
        }, {
          "description" : "IntegrationListenerService",
          "destinationId" : "55",
          "id" : "184",
          "linkedRelationshipId" : "182",
          "sourceId" : "30"
        }, {
          "description" : "IntegrationListenerService",
          "destinationId" : "56",
          "id" : "187",
          "linkedRelationshipId" : "185",
          "sourceId" : "30"
        } ],
        "tags" : "Element,Container,Events,Azure,ASB"
      }, {
        "components" : [ {
          "documentation" : { },
          "id" : "41",
          "name" : "Event Exchange",
          "properties" : {
            "structurizr.dsl.identifier" : "server.rabbit_mq.event_exchange"
          },
          "relationships" : [ {
            "description" : "Fan-out Subscription",
            "destinationId" : "43",
            "id" : "190",
            "sourceId" : "41",
            "tags" : "Relationship"
          }, {
            "description" : "Fan-out Subscription",
            "destinationId" : "46",
            "id" : "191",
            "sourceId" : "41",
            "tags" : "Relationship"
          }, {
            "description" : "Fan-out Subscription",
            "destinationId" : "45",
            "id" : "192",
            "sourceId" : "41",
            "tags" : "Relationship"
          }, {
            "description" : "Fan-out Subscription",
            "destinationId" : "44",
            "id" : "193",
            "sourceId" : "41",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component,Events,Event Tier"
        }, {
          "documentation" : { },
          "id" : "42",
          "name" : "Integration Exchange",
          "properties" : {
            "structurizr.dsl.identifier" : "server.rabbit_mq.integration_exchange"
          },
          "relationships" : [ {
            "description" : "Routed via Slack key",
            "destinationId" : "47",
            "id" : "194",
            "sourceId" : "42",
            "tags" : "Relationship"
          }, {
            "description" : "Routed via Webhook key",
            "destinationId" : "48",
            "id" : "195",
            "sourceId" : "42",
            "tags" : "Relationship"
          }, {
            "description" : "Routed via HEC key",
            "destinationId" : "49",
            "id" : "196",
            "sourceId" : "42",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component,Events,Integrations,Integration Tier"
        }, {
          "description" : "Queue for EventRepositoryHandler to write all events into the database.",
          "documentation" : { },
          "id" : "43",
          "name" : "events-write-queue",
          "properties" : {
            "structurizr.dsl.identifier" : "server.rabbit_mq.eventswritequeue"
          },
          "relationships" : [ {
            "description" : "EventListenerService",
            "destinationId" : "61",
            "id" : "200",
            "sourceId" : "43",
            "tags" : "Relationship"
          }, {
            "description" : "EventListenerService",
            "destinationId" : "7",
            "id" : "201",
            "linkedRelationshipId" : "200",
            "sourceId" : "43"
          } ],
          "tags" : "Element,Component,RabbitMQ,Queue,Event Tier"
        }, {
          "description" : "Queue for slack-specific EventIntegrationHandler which publishes processed events to the integration tier if there is a Slack integration configured.",
          "documentation" : { },
          "id" : "44",
          "name" : "events-slack-queue",
          "properties" : {
            "structurizr.dsl.identifier" : "server.rabbit_mq.eventsslackqueue"
          },
          "relationships" : [ {
            "description" : "EventListenerService",
            "destinationId" : "62",
            "id" : "209",
            "sourceId" : "44",
            "tags" : "Relationship"
          }, {
            "description" : "EventListenerService",
            "destinationId" : "7",
            "id" : "210",
            "linkedRelationshipId" : "209",
            "sourceId" : "44"
          } ],
          "tags" : "Element,Component,RabbitMQ,Queue,Event Tier,Slack"
        }, {
          "description" : "Queue for webhook-specific EventIntegrationHandler which publishes processed events to the integration tier if there is a webhook integration configured.",
          "documentation" : { },
          "id" : "45",
          "name" : "events-webhook-queue",
          "properties" : {
            "structurizr.dsl.identifier" : "server.rabbit_mq.eventswebhookqueue"
          },
          "relationships" : [ {
            "description" : "EventListenerService",
            "destinationId" : "62",
            "id" : "207",
            "sourceId" : "45",
            "tags" : "Relationship"
          }, {
            "description" : "EventListenerService",
            "destinationId" : "7",
            "id" : "208",
            "linkedRelationshipId" : "207",
            "sourceId" : "45"
          } ],
          "tags" : "Element,Component,RabbitMQ,Queue,Event Tier,Webhook"
        }, {
          "description" : "Queue for HEC-specific EventIntegrationHandler which publishes processed events to the integration tier if there is a HEC integration configured.",
          "documentation" : { },
          "id" : "46",
          "name" : "events-hec-queue",
          "properties" : {
            "structurizr.dsl.identifier" : "server.rabbit_mq.eventshecqueue"
          },
          "relationships" : [ {
            "description" : "EventListenerService",
            "destinationId" : "62",
            "id" : "204",
            "sourceId" : "46",
            "tags" : "Relationship"
          }, {
            "description" : "EventListenerService",
            "destinationId" : "7",
            "id" : "205",
            "linkedRelationshipId" : "204",
            "sourceId" : "46"
          } ],
          "tags" : "Element,Component,RabbitMQ,Queue,Event Tier,HEC"
        }, {
          "description" : "Integration-level queue for Slack IntegrationMessages. Routing key = 'slack'.",
          "documentation" : { },
          "id" : "47",
          "name" : "integration-slack-queue",
          "properties" : {
            "structurizr.dsl.identifier" : "server.rabbit_mq.integrationslackqueue"
          },
          "relationships" : [ {
            "description" : "IntegrationListenerService",
            "destinationId" : "63",
            "id" : "214",
            "sourceId" : "47",
            "tags" : "Relationship"
          }, {
            "description" : "IntegrationListenerService",
            "destinationId" : "7",
            "id" : "215",
            "linkedRelationshipId" : "214",
            "sourceId" : "47"
          } ],
          "tags" : "Element,Component,RabbitMQ,Queue,Integration Tier,Slack"
        }, {
          "description" : "Integration-level queue for Webhook IntegrationMessages. Routing key = 'webhook'.",
          "documentation" : { },
          "id" : "48",
          "name" : "integration-webhook-queue",
          "properties" : {
            "structurizr.dsl.identifier" : "server.rabbit_mq.integrationwebhookqueue"
          },
          "relationships" : [ {
            "description" : "IntegrationListenerService",
            "destinationId" : "64",
            "id" : "217",
            "sourceId" : "48",
            "tags" : "Relationship"
          }, {
            "description" : "IntegrationListenerService",
            "destinationId" : "7",
            "id" : "218",
            "linkedRelationshipId" : "217",
            "sourceId" : "48"
          } ],
          "tags" : "Element,Component,RabbitMQ,Queue,Integration Tier,Webhook"
        }, {
          "description" : "Integration-level queue for HEC IntegrationMessages. Routing key = 'hec'.",
          "documentation" : { },
          "id" : "49",
          "name" : "integration-hec-queue",
          "properties" : {
            "structurizr.dsl.identifier" : "server.rabbit_mq.integrationhecqueue"
          },
          "relationships" : [ {
            "description" : "IntegrationListenerService",
            "destinationId" : "64",
            "id" : "220",
            "sourceId" : "49",
            "tags" : "Relationship"
          }, {
            "description" : "IntegrationListenerService",
            "destinationId" : "7",
            "id" : "221",
            "linkedRelationshipId" : "220",
            "sourceId" : "49"
          } ],
          "tags" : "Element,Component,RabbitMQ,Queue,Integration Tier,HEC"
        }, {
          "description" : "Integration-level retry queue for Slack IntegrationMessages. Routing key Label = 'slack-retry'.",
          "documentation" : { },
          "id" : "50",
          "name" : "integration-slack-retry-queue",
          "properties" : {
            "structurizr.dsl.identifier" : "server.rabbit_mq.integrationslackretryqueue"
          },
          "relationships" : [ {
            "description" : "DLQ after configured retry timing",
            "destinationId" : "47",
            "id" : "197",
            "sourceId" : "50",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component,RabbitMQ,Queue,Integration Tier,Slack"
        }, {
          "description" : "Integration-level retry queue for Webhook IntegrationMessages. Routing key = 'webhook-retry'.",
          "documentation" : { },
          "id" : "51",
          "name" : "integration-webhook-retry-queue",
          "properties" : {
            "structurizr.dsl.identifier" : "server.rabbit_mq.integrationwebhookretryqueue"
          },
          "relationships" : [ {
            "description" : "DLQ after configured retry timing",
            "destinationId" : "48",
            "id" : "198",
            "sourceId" : "51",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component,RabbitMQ,Queue,Integration Tier,Webhook"
        }, {
          "description" : "Integration-level retry queue for HEC IntegrationMessages. Routing key = 'hec-retry'.",
          "documentation" : { },
          "id" : "52",
          "name" : "integration-hec-retry-queue",
          "properties" : {
            "structurizr.dsl.identifier" : "server.rabbit_mq.integrationhecretryqueue"
          },
          "relationships" : [ {
            "description" : "DLQ after configured retry timing",
            "destinationId" : "49",
            "id" : "199",
            "sourceId" : "52",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component,RabbitMQ,Queue,Integration Tier,HEC"
        } ],
        "documentation" : { },
        "id" : "40",
        "name" : "RabbitMQ",
        "properties" : {
          "structurizr.dsl.identifier" : "server.rabbit_mq"
        },
        "relationships" : [ {
          "description" : "EventListenerService",
          "destinationId" : "61",
          "id" : "202",
          "linkedRelationshipId" : "200",
          "sourceId" : "40"
        }, {
          "description" : "EventListenerService",
          "destinationId" : "7",
          "id" : "203",
          "linkedRelationshipId" : "200",
          "sourceId" : "40"
        }, {
          "description" : "EventListenerService",
          "destinationId" : "62",
          "id" : "206",
          "linkedRelationshipId" : "204",
          "sourceId" : "40"
        }, {
          "description" : "IntegrationListenerService",
          "destinationId" : "63",
          "id" : "216",
          "linkedRelationshipId" : "214",
          "sourceId" : "40"
        }, {
          "description" : "IntegrationListenerService",
          "destinationId" : "64",
          "id" : "219",
          "linkedRelationshipId" : "217",
          "sourceId" : "40"
        } ],
        "tags" : "Element,Container,Events,RabbitMQ"
      }, {
        "documentation" : { },
        "id" : "74",
        "name" : "Identity",
        "properties" : {
          "structurizr.dsl.identifier" : "server.identity"
        },
        "relationships" : [ {
          "description" : "Queries",
          "destinationId" : "11",
          "id" : "240",
          "sourceId" : "74",
          "tags" : "Relationship"
        } ],
        "tags" : "Element,Container,Auth"
      }, {
        "documentation" : { },
        "id" : "75",
        "name" : "SSO",
        "properties" : {
          "structurizr.dsl.identifier" : "server.sso"
        },
        "relationships" : [ {
          "description" : "Queries",
          "destinationId" : "11",
          "id" : "241",
          "sourceId" : "75",
          "tags" : "Relationship"
        } ],
        "tags" : "Element,Container,Auth"
      }, {
        "components" : [ {
          "description" : "IconsController",
          "documentation" : { },
          "id" : "79",
          "name" : "IconsController",
          "properties" : {
            "structurizr.dsl.identifier" : "server.icons.icons_controller"
          },
          "relationships" : [ {
            "description" : "Requests icons from",
            "destinationId" : "81",
            "id" : "86",
            "sourceId" : "79",
            "tags" : "Relationship"
          }, {
            "description" : "Caches icons in",
            "destinationId" : "82",
            "id" : "87",
            "perspectives" : [ {
              "description" : "Icons 1.3.1 Aggregate vault content leak through timing attack on cache \n\n            Icons 1.3.2 Possible injection attack through cache key \n\n            Icons 1.3.3 & Icons 1.3.4 Cache bloat leading to DoS \n\n            Icons 1.3.5 Cache poisoning leading to incorrect icon storage",
              "name" : "Security"
            } ],
            "sourceId" : "79",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component",
          "technology" : "C# ASP.NET Core"
        }, {
          "description" : "Provides information about the deployed icon service. Allow for health checks.",
          "documentation" : { },
          "id" : "80",
          "name" : "InfoController",
          "properties" : {
            "structurizr.dsl.identifier" : "server.icons.info_controller"
          },
          "tags" : "Element,Component,Info,HealthCheck",
          "technology" : "C# ASP.NET Core"
        }, {
          "description" : "Resolves a single source for a website icon and downloads it.",
          "documentation" : { },
          "id" : "81",
          "name" : "IconDetermination",
          "properties" : {
            "structurizr.dsl.identifier" : "server.icons.icon_determination"
          },
          "relationships" : [ {
            "description" : "Resolves IP addresses for domain names from",
            "destinationId" : "88",
            "id" : "89",
            "sourceId" : "81",
            "tags" : "Relationship"
          }, {
            "description" : "Retrieves icons from",
            "destinationId" : "92",
            "id" : "93",
            "sourceId" : "81",
            "tags" : "Relationship"
          } ],
          "tags" : "Element,Component"
        }, {
          "description" : "Caches icons for a given domain",
          "documentation" : { },
          "id" : "82",
          "name" : "IconCache",
          "properties" : {
            "structurizr.dsl.identifier" : "server.icons.icon_cache"
          },
          "tags" : "Element,Component,Cache",
          "technology" : "C# MemoryCache"
        } ],
        "documentation" : {
          "sections" : [ {
            "content" : "## Threat Model\n\n### Example Model or Relationship\n\n#### Example Threat\n\n- **Type**: type\n- **Priority**: TBD/Low/Medium/High/Critical\n- **Likelihood**: TBD/Low/Medium/High/Critical\n- **Impact**: TBD/Low/Medium/High/Critical\n\ndescription of the threat.\n\n##### Example Threat Mitigations\ndescribe the mitigations for the threat.\n\n### Clients -> IconsController\nCommunication from clients to the icons component. This is an unauthenticated endpoint with minimal input validation.\n\n#### SSL termination exposes vault contents to network administrators\n\n- **Type**: Information Disclosure\n- **Priority**: TBD\n- **Likelihood**: TBD\n- **Impact**: TBD\n\nA machine with SSL terminating proxies cannot rely on encrypted query parameters hiding vault contents from network administrators.\n\n##### Mitigations\n- <span style=\"color:red\">Not Implemented</span>: Establish encrypted pipe communication with Icons service prior to requesting icon resolution\n\n#### Cleartext transmission of vault contents to Server\n\n- **Type**: Information Disclosure\n- **Priority**: TBD\n- **Likelihood**: TBD\n- **Impact**: TBD\n\nServer-side after TLS by necessity to lookup a favicon. However, to maintain our promises as a no-log proxy, we need to be sure not to maintain ip records for icon service requests\n\n##### Mitigations\n- <span style=\"color:red\">Unconfirmed</span>: Configure network edge and datadog to drop this identifying data.\n\n#### No SLA offered on Icons service\n\n- **Type**: Denial of Service\n- **Priority**: TBD\n- **Likelihood**: TBD\n- **Impact**: TBD\n\nWe do not offer SLA on up time of icons service. Clients may be unable to resolve icons, and we need to determine a graceful degradation strategy.\n\n##### Mitigations\n- <span style=\"color:green\">Done</span>: Default icon fallback (globe)\n- <span style=\"color:red\">Not Implemented, Not Prioritized</span>: Local cache of retrieved icons\n\n#### SSRF by proxied requests\n\n- **Type**: Elevation of Privilege / Information Disclosure\n- **Priority**: TBD\n- **Likelihood**: TBD\n- **Impact**: TBD\n\nThe service is designed to proxy requests to arbitrary URLs. This can be used to access internal network resources.\n\nIf a site redirects to an internal network address, the internal network topography may be exposed to the client.\n\n##### Mitigations\n- <span style=\"color:green\">Done</span>: Isolation of the icons component from the rest of the system intranet.\n- <span style=\"color:green\">Done</span>: Avoid fetching by domain name. All requests must be first resolved to an IP address and filtered against internal network ranges, defined as:\n  - `::1`, `::`, `::ffff:`\n  - IPv6 and starting with `fc`, `fd`, `fe`, or `ff`\n  - IPv4 and starting with `0.`, `10.`, `100.`, `127.`, `169.254`, `172.16-31`, or `192.168`\n\n  This is done in the `IconDetermination` component\n\n### IconsController -> IconCache\nCommunication from the icons controller to a mem cache of previously retrieved icons, keyed by original domain requested.\n\n#### Cache determination through timing measurements\n\n- **Type**: Information Disclosure\n- **Priority**: Low\n- **Likelihood**: Low\n- **Impact**: Low\n\nBy measuring the time it takes to retrieve an icon, an attacker may be able to determine if a domain has been previously requested by another user, revealing that some user on the service has that domain in their vault.\n\n##### Mitigations\n<span style=\"color:red\">None identified</span>\n\n#### Unescaped storage of user-input data in cache\n\n- **Type**: Tampering\n- **Priority**: Low\n- **Likelihood**: Low\n- **Impact**: Low\n\nUnescaped user input data may be stored as keys in the cache. This input data is not executed, but if the storage method is changed in the future, this may lead to some injection attack.\n\n##### Mitigations\n<span style=\"color:red\">None identified</span>\n\n#### Cache bloat through intentionally large icons\n\n- **Type**: Denial of Service\n- **Priority**: TBD\n- **Likelihood**: TBD\n- **Impact**: TBD\n\nUser request may intentionally resolve to very large icons, bloating the cache and increasing memory requirements.\n\n<span style=\"color:red\">Open question</span>: Should we also limit the size of icons fetched?\n\n##### Mitigations\n<span style=\"color:green\">Done</span>: Limit size of icons stored in cache\n\n#### Cache bloat through many unique domain requests\n\n- **Type**: Denial of Service\n- **Priority**: TBD\n- **Likelihood**: TBD\n- **Impact**: TBD\n\nUser request may intentionally resolve many unique domains to resolve that may or may not exist, bloating the cache and increasing memory requirements.\n\n##### Mitigations\n<span style=\"color:red\">Unconfirmed</span>: Rate limit requests to the icons service\n\n#### Storage of potentially sensitive data as keys or values in cache\n\n- **Type**: Information Disclosure\n- **Priority**: TBD\n- **Likelihood**: TBD\n- **Impact**: TBD\n\nUpload of urls is automatic to our icon service. If our filters for upload are incorrect, we may store sensitive data in our cache. For example, onion addresses.\n\n##### Mitigations\n<span style=\"color:green\">Done</span>: Avoid filter known sensitive urls\n<span style=\"color:red\">Not implemented, Not prioritized</span>: Add client-side setting to disable icon request for a given url or pattern\n\n#### Cache poisoning via dns poisoning\n\n- **Type**: Tampering\n- **Priority**: Low\n- **Likelihood**: Low\n- **Impact**: Low\n\nDNS poisoning would lead to incorrect icons being cached for a given domain.\n\n##### Mitigations\n<span style=\"color:red\">None Identified</span>\n",
            "format" : "Markdown",
            "order" : 1,
            "title" : ""
          } ]
        },
        "id" : "78",
        "name" : "Icons",
        "properties" : {
          "structurizr.dsl.identifier" : "server.icons"
        },
        "relationships" : [ {
          "description" : "Resolves IP addresses for domain names from",
          "destinationId" : "88",
          "id" : "90",
          "linkedRelationshipId" : "89",
          "sourceId" : "78"
        }, {
          "description" : "Retrieves icons from",
          "destinationId" : "92",
          "id" : "94",
          "linkedRelationshipId" : "93",
          "sourceId" : "78"
        } ],
        "tags" : "Element,Container"
      } ],
      "documentation" : { },
      "group" : "Bitwarden Controlled",
      "id" : "4",
      "location" : "Unspecified",
      "name" : "Bitwarden Server",
      "properties" : {
        "structurizr.dsl.identifier" : "server"
      },
      "relationships" : [ {
        "description" : "Resolves IP addresses for domain names from",
        "destinationId" : "88",
        "id" : "91",
        "linkedRelationshipId" : "89",
        "sourceId" : "4"
      }, {
        "description" : "Retrieves icons from",
        "destinationId" : "92",
        "id" : "95",
        "linkedRelationshipId" : "93",
        "sourceId" : "4"
      }, {
        "description" : "Publishes configured events to",
        "destinationId" : "70",
        "id" : "227",
        "linkedRelationshipId" : "223",
        "sourceId" : "4"
      }, {
        "description" : "Publishes configured events to",
        "destinationId" : "69",
        "id" : "228",
        "linkedRelationshipId" : "223",
        "sourceId" : "4"
      }, {
        "description" : "Publishes configured events to",
        "destinationId" : "73",
        "id" : "233",
        "linkedRelationshipId" : "230",
        "sourceId" : "4"
      }, {
        "description" : "Publishes configured events to",
        "destinationId" : "72",
        "id" : "236",
        "linkedRelationshipId" : "234",
        "sourceId" : "4"
      }, {
        "description" : "Publishes configured events to",
        "destinationId" : "71",
        "id" : "239",
        "linkedRelationshipId" : "237",
        "sourceId" : "4"
      }, {
        "description" : "Requests payments for customers",
        "destinationId" : "76",
        "id" : "244",
        "linkedRelationshipId" : "242",
        "sourceId" : "4"
      }, {
        "description" : "Requests payments for customers",
        "destinationId" : "77",
        "id" : "247",
        "linkedRelationshipId" : "245",
        "sourceId" : "4"
      } ],
      "tags" : "Element,Software System"
    }, {
      "containers" : [ {
        "documentation" : { },
        "id" : "16",
        "name" : "Web Application",
        "properties" : {
          "structurizr.dsl.identifier" : "clients.web"
        },
        "relationships" : [ {
          "description" : "Makes requests to",
          "destinationId" : "5",
          "id" : "113",
          "sourceId" : "16",
          "tags" : "Relationship"
        }, {
          "description" : "Makes requests to",
          "destinationId" : "4",
          "id" : "114",
          "linkedRelationshipId" : "113",
          "sourceId" : "16"
        }, {
          "description" : "Authenticates with",
          "destinationId" : "74",
          "id" : "126",
          "sourceId" : "16",
          "tags" : "Relationship"
        } ],
        "tags" : "Element,Container,Web"
      }, {
        "documentation" : { },
        "id" : "17",
        "name" : "iOS Application",
        "properties" : {
          "structurizr.dsl.identifier" : "clients.ios"
        },
        "relationships" : [ {
          "description" : "Makes requests to",
          "destinationId" : "5",
          "id" : "116",
          "sourceId" : "17",
          "tags" : "Relationship"
        }, {
          "description" : "Makes requests to",
          "destinationId" : "4",
          "id" : "117",
          "linkedRelationshipId" : "116",
          "sourceId" : "17"
        }, {
          "description" : "Authenticates With",
          "destinationId" : "74",
          "id" : "128",
          "sourceId" : "17",
          "tags" : "Relationship"
        } ],
        "tags" : "Element,Container,Mobile"
      }, {
        "documentation" : { },
        "id" : "18",
        "name" : "Android Application",
        "properties" : {
          "structurizr.dsl.identifier" : "clients.android"
        },
        "relationships" : [ {
          "description" : "Makes requests to",
          "destinationId" : "5",
          "id" : "118",
          "sourceId" : "18",
          "tags" : "Relationship"
        }, {
          "description" : "Makes requests to",
          "destinationId" : "4",
          "id" : "119",
          "linkedRelationshipId" : "118",
          "sourceId" : "18"
        }, {
          "description" : "Authenticates With",
          "destinationId" : "74",
          "id" : "129",
          "sourceId" : "18",
          "tags" : "Relationship"
        } ],
        "tags" : "Element,Container,Mobile"
      }, {
        "documentation" : { },
        "id" : "19",
        "name" : "Browser Extension",
        "properties" : {
          "structurizr.dsl.identifier" : "clients.browser_extension"
        },
        "relationships" : [ {
          "description" : "Makes requests to",
          "destinationId" : "5",
          "id" : "120",
          "sourceId" : "19",
          "tags" : "Relationship"
        }, {
          "description" : "Makes requests to",
          "destinationId" : "4",
          "id" : "121",
          "linkedRelationshipId" : "120",
          "sourceId" : "19"
        }, {
          "description" : "Authenticates With",
          "destinationId" : "74",
          "id" : "130",
          "sourceId" : "19",
          "tags" : "Relationship"
        } ],
        "tags" : "Element,Container,Browser"
      }, {
        "documentation" : { },
        "id" : "20",
        "name" : "CLI",
        "properties" : {
          "structurizr.dsl.identifier" : "clients.cli"
        },
        "relationships" : [ {
          "description" : "Makes requests to",
          "destinationId" : "5",
          "id" : "122",
          "sourceId" : "20",
          "tags" : "Relationship"
        }, {
          "description" : "Makes requests to",
          "destinationId" : "4",
          "id" : "123",
          "linkedRelationshipId" : "122",
          "sourceId" : "20"
        }, {
          "description" : "Authenticates With",
          "destinationId" : "74",
          "id" : "131",
          "sourceId" : "20",
          "tags" : "Relationship"
        } ],
        "tags" : "Element,Container,CLI"
      }, {
        "documentation" : { },
        "id" : "21",
        "name" : "Desktop Application",
        "properties" : {
          "structurizr.dsl.identifier" : "clients.desktop"
        },
        "relationships" : [ {
          "description" : "Makes requests to",
          "destinationId" : "5",
          "id" : "124",
          "sourceId" : "21",
          "tags" : "Relationship"
        }, {
          "description" : "Makes requests to",
          "destinationId" : "4",
          "id" : "125",
          "linkedRelationshipId" : "124",
          "sourceId" : "21"
        }, {
          "description" : "Authenticates With",
          "destinationId" : "74",
          "id" : "132",
          "sourceId" : "21",
          "tags" : "Relationship"
        } ],
        "tags" : "Element,Container,Desktop"
      } ],
      "documentation" : { },
      "group" : "Bitwarden Controlled",
      "id" : "15",
      "location" : "Unspecified",
      "name" : "Clients",
      "properties" : {
        "structurizr.dsl.identifier" : "clients"
      },
      "relationships" : [ {
        "description" : "Requests icons for cleartext urls from",
        "destinationId" : "79",
        "id" : "83",
        "perspectives" : [ {
          "description" : "Icons 1.2.1 Broken SSL communication exposes vault contents to network administrators \n\n            Icons 1.2.2 Tracking of user vault contents by ip correlation between identity and icons services \n\n            Icons 1.2.3 No SLA offered on Icons service, graceful degradation of features needed if it goes down \n\n            Icons 1.2.4 SSRF through crafted input resolving to a location the server has elevated privileges in",
          "name" : "Security"
        } ],
        "sourceId" : "15",
        "tags" : "Relationship"
      }, {
        "description" : "Requests icons for cleartext urls from",
        "destinationId" : "78",
        "id" : "84",
        "linkedRelationshipId" : "83",
        "sourceId" : "15"
      }, {
        "description" : "Requests icons for cleartext urls from",
        "destinationId" : "4",
        "id" : "85",
        "linkedRelationshipId" : "83",
        "sourceId" : "15"
      }, {
        "description" : "Makes requests to",
        "destinationId" : "5",
        "id" : "115",
        "linkedRelationshipId" : "113",
        "sourceId" : "15"
      }, {
        "description" : "Authenticates with",
        "destinationId" : "74",
        "id" : "127",
        "linkedRelationshipId" : "126",
        "sourceId" : "15"
      }, {
        "description" : "Posts local usage events to",
        "destinationId" : "7",
        "id" : "134",
        "sourceId" : "15",
        "tags" : "Relationship"
      } ],
      "tags" : "Element,Software System"
    }, {
      "documentation" : { },
      "group" : "Bitwarden Controlled",
      "id" : "22",
      "location" : "Unspecified",
      "name" : "Directory Connector",
      "properties" : {
        "structurizr.dsl.identifier" : "directory_connector"
      },
      "relationships" : [ {
        "description" : "Syncs users and groups to Bitwarden",
        "destinationId" : "5",
        "id" : "28",
        "sourceId" : "22",
        "tags" : "Relationship"
      }, {
        "description" : "Syncs users and groups to Bitwarden",
        "destinationId" : "4",
        "id" : "29",
        "linkedRelationshipId" : "28",
        "sourceId" : "22"
      } ],
      "tags" : "Element,Software System,Directory,LDAP,Self-Hosted"
    }, {
      "documentation" : { },
      "group" : "Bitwarden Controlled",
      "id" : "23",
      "location" : "Unspecified",
      "name" : "Key Connector",
      "properties" : {
        "structurizr.dsl.identifier" : "key_connector"
      },
      "relationships" : [ {
        "description" : "Validates JWTs with",
        "destinationId" : "74",
        "id" : "251",
        "sourceId" : "23",
        "tags" : "Relationship"
      }, {
        "description" : "Validates JWTs with",
        "destinationId" : "4",
        "id" : "252",
        "linkedRelationshipId" : "251",
        "sourceId" : "23"
      } ],
      "tags" : "Element,Software System"
    }, {
      "description" : "Self-hosted instances of Bitwarden servers",
      "documentation" : { },
      "id" : "24",
      "location" : "Unspecified",
      "name" : "Self-Hosted Instances",
      "properties" : {
        "structurizr.dsl.identifier" : "self_hosted_instances"
      },
      "relationships" : [ {
        "description" : "Sends push notification proxy requests to",
        "destinationId" : "8",
        "id" : "144",
        "sourceId" : "24",
        "tags" : "Relationship"
      }, {
        "description" : "Sends push notification proxy requests to",
        "destinationId" : "4",
        "id" : "145",
        "linkedRelationshipId" : "144",
        "sourceId" : "24"
      } ],
      "tags" : "Element,Software System,Self-Hosted,External"
    }, {
      "containers" : [ {
        "description" : "Slack messaging service. Receives messages via configured event integrations.",
        "documentation" : { },
        "id" : "70",
        "name" : "Slack",
        "properties" : {
          "structurizr.dsl.identifier" : "external_services.slack"
        },
        "tags" : "Element,Container,External,Events,Integrations,Slack"
      }, {
        "description" : "Splunk SIEM service. Receives events via configured event integrations.",
        "documentation" : { },
        "id" : "71",
        "name" : "Splunk",
        "properties" : {
          "structurizr.dsl.identifier" : "external_services.splunk"
        },
        "tags" : "Element,Container,External,Events,Integrations,Splunk"
      }, {
        "description" : "Datadog SIEM service. Receives events via configured event integrations.",
        "documentation" : { },
        "id" : "72",
        "name" : "Datadog",
        "properties" : {
          "structurizr.dsl.identifier" : "external_services.datadog"
        },
        "tags" : "Element,Container,External,Events,Integrations,Datadog"
      }, {
        "description" : "Crowdstrike Falcon SIEM service. Receives events via configured event integrations.",
        "documentation" : { },
        "id" : "73",
        "name" : "Crowdstrike Falcon",
        "properties" : {
          "structurizr.dsl.identifier" : "external_services.crowdstrike"
        },
        "tags" : "Element,Container,External,Events,Integrations,Crowdstrike Falcon,Crowdstrike"
      } ],
      "description" : "External services (e.g. SIEM, Slack, et al) that consume events via integrations",
      "documentation" : { },
      "id" : "69",
      "location" : "Unspecified",
      "name" : "External Services",
      "properties" : {
        "structurizr.dsl.identifier" : "external_services"
      },
      "tags" : "Element,Software System,External,Events,Integrations"
    }, {
      "description" : "Handles credit cards and subscriptions.",
      "documentation" : { },
      "group" : "Payment Systems",
      "id" : "76",
      "location" : "Unspecified",
      "name" : "Stripe",
      "properties" : {
        "structurizr.dsl.identifier" : "stripe"
      },
      "relationships" : [ {
        "description" : "Sends subscription events to",
        "destinationId" : "6",
        "id" : "248",
        "sourceId" : "76",
        "tags" : "Relationship"
      }, {
        "description" : "Sends subscription events to",
        "destinationId" : "5",
        "id" : "249",
        "linkedRelationshipId" : "248",
        "sourceId" : "76"
      }, {
        "description" : "Sends subscription events to",
        "destinationId" : "4",
        "id" : "250",
        "linkedRelationshipId" : "248",
        "sourceId" : "76"
      } ],
      "tags" : "Element,Software System,External,Billing"
    }, {
      "description" : "Handles PayPal and cryptocurrency.",
      "documentation" : { },
      "group" : "Payment Systems",
      "id" : "77",
      "location" : "Unspecified",
      "name" : "Braintree",
      "properties" : {
        "structurizr.dsl.identifier" : "braintree"
      },
      "tags" : "Element,Software System,External,Billing"
    }, {
      "documentation" : { },
      "id" : "88",
      "location" : "Unspecified",
      "name" : "DNS",
      "properties" : {
        "structurizr.dsl.identifier" : "dns"
      },
      "tags" : "Element,Software System,External,Icons"
    }, {
      "documentation" : { },
      "id" : "92",
      "location" : "Unspecified",
      "name" : "External Websites",
      "properties" : {
        "structurizr.dsl.identifier" : "external_websites"
      },
      "tags" : "Element,Software System,External,Icons"
    } ]
  },
  "name" : "Bitwarden Server System",
  "properties" : {
    "structurizr.dsl" : ""
  },
  "views" : {
    "componentViews" : [ {
      "containerId" : "30",
      "dimensions" : {
        "height" : 2446,
        "width" : 2980
      },
      "elements" : [ {
        "id" : "5",
        "x" : 1145,
        "y" : 5
      }, {
        "id" : "7",
        "x" : 2190,
        "y" : 5
      }, {
        "id" : "10",
        "x" : 50,
        "y" : 1255
      }, {
        "id" : "31",
        "x" : 1575,
        "y" : 430
      }, {
        "id" : "32",
        "x" : 1900,
        "y" : 1255
      }, {
        "id" : "33",
        "x" : 760,
        "y" : 860
      }, {
        "id" : "34",
        "x" : 1331,
        "y" : 860
      }, {
        "id" : "35",
        "x" : 1902,
        "y" : 860
      }, {
        "id" : "36",
        "x" : 2475,
        "y" : 860
      }, {
        "id" : "37",
        "x" : 1331,
        "y" : 1710
      }, {
        "id" : "38",
        "x" : 1902,
        "y" : 1710
      }, {
        "id" : "39",
        "x" : 2475,
        "y" : 1710
      } ],
      "externalContainerBoundariesVisible" : false,
      "key" : "Azure_Service_Bus",
      "order" : 1,
      "relationships" : [ {
        "id" : "147"
      }, {
        "id" : "149"
      }, {
        "id" : "155"
      }, {
        "id" : "156"
      }, {
        "id" : "157"
      }, {
        "id" : "158"
      }, {
        "id" : "159"
      }, {
        "id" : "160"
      }, {
        "id" : "161"
      }, {
        "id" : "163",
        "vertices" : [ {
          "x" : 663,
          "y" : 1197
        } ]
      }, {
        "id" : "167"
      }, {
        "id" : "170"
      }, {
        "id" : "172"
      }, {
        "id" : "175"
      }, {
        "id" : "183",
        "vertices" : [ {
          "x" : 670,
          "y" : 1685
        } ]
      }, {
        "id" : "186",
        "vertices" : [ {
          "x" : 2145,
          "y" : 2050
        }, {
          "x" : 445,
          "y" : 2025
        } ]
      }, {
        "id" : "189",
        "vertices" : [ {
          "x" : 2715,
          "y" : 2155
        }, {
          "x" : 320,
          "y" : 2140
        } ]
      } ]
    }, {
      "containerId" : "40",
      "dimensions" : {
        "height" : 3411,
        "width" : 3920
      },
      "elements" : [ {
        "id" : "5",
        "x" : 1850,
        "y" : 150
      }, {
        "id" : "7",
        "x" : 75,
        "y" : 1425
      }, {
        "id" : "41",
        "x" : 1845,
        "y" : 615
      }, {
        "id" : "42",
        "x" : 2140,
        "y" : 1515
      }, {
        "id" : "43",
        "x" : 2910,
        "y" : 1005
      }, {
        "id" : "44",
        "x" : 1090,
        "y" : 1005
      }, {
        "id" : "45",
        "x" : 1760,
        "y" : 1000
      }, {
        "id" : "46",
        "x" : 2340,
        "y" : 1000
      }, {
        "id" : "47",
        "x" : 1520,
        "y" : 1970
      }, {
        "id" : "48",
        "x" : 2160,
        "y" : 1970
      }, {
        "id" : "49",
        "x" : 2765,
        "y" : 1975
      }, {
        "id" : "50",
        "x" : 1525,
        "y" : 2620
      }, {
        "id" : "51",
        "x" : 2165,
        "y" : 2620
      }, {
        "id" : "52",
        "x" : 2770,
        "y" : 2625
      } ],
      "externalContainerBoundariesVisible" : false,
      "key" : "RabbitMQ",
      "order" : 2,
      "relationships" : [ {
        "id" : "151"
      }, {
        "id" : "153",
        "vertices" : [ {
          "x" : 285,
          "y" : 760
        } ]
      }, {
        "id" : "190"
      }, {
        "id" : "191"
      }, {
        "id" : "192"
      }, {
        "id" : "193"
      }, {
        "id" : "194"
      }, {
        "id" : "195"
      }, {
        "id" : "196"
      }, {
        "id" : "197"
      }, {
        "id" : "198"
      }, {
        "id" : "199"
      }, {
        "id" : "201",
        "vertices" : [ {
          "x" : 3150,
          "y" : 1420
        } ]
      }, {
        "id" : "205",
        "vertices" : [ {
          "x" : 2585,
          "y" : 1375
        } ]
      }, {
        "id" : "208",
        "vertices" : [ {
          "x" : 1995,
          "y" : 1340
        } ]
      }, {
        "id" : "210",
        "vertices" : [ {
          "x" : 1325,
          "y" : 1350
        } ]
      }, {
        "id" : "213"
      }, {
        "id" : "215",
        "vertices" : [ {
          "x" : 310,
          "y" : 2095
        } ]
      }, {
        "id" : "218",
        "vertices" : [ {
          "x" : 2235,
          "y" : 2330
        }, {
          "x" : 270,
          "y" : 2160
        } ]
      }, {
        "id" : "221",
        "vertices" : [ {
          "x" : 2925,
          "y" : 2380
        }, {
          "x" : 280,
          "y" : 2275
        } ]
      } ]
    }, {
      "containerId" : "10",
      "dimensions" : {
        "height" : 2205,
        "width" : 3435
      },
      "elements" : [ {
        "id" : "11",
        "x" : 454,
        "y" : 1670
      }, {
        "id" : "30",
        "x" : 1514,
        "y" : 165
      }, {
        "id" : "53",
        "x" : 219,
        "y" : 585
      }, {
        "id" : "54",
        "x" : 1354,
        "y" : 720
      }, {
        "id" : "55",
        "x" : 2114,
        "y" : 717
      }, {
        "id" : "56",
        "x" : 2764,
        "y" : 717
      }, {
        "id" : "57",
        "x" : 779,
        "y" : 1142
      }, {
        "id" : "58",
        "x" : 2114,
        "y" : 1140
      }, {
        "id" : "59",
        "x" : 2764,
        "y" : 1140
      }, {
        "id" : "60",
        "x" : 1354,
        "y" : 1138
      }, {
        "id" : "69",
        "x" : 2424,
        "y" : 1665
      } ],
      "externalContainerBoundariesVisible" : false,
      "key" : "Events_Processor",
      "order" : 3,
      "relationships" : [ {
        "id" : "164"
      }, {
        "id" : "168",
        "vertices" : [ {
          "x" : 1794,
          "y" : 640
        } ]
      }, {
        "id" : "174",
        "vertices" : [ {
          "x" : 1539,
          "y" : 545
        } ]
      }, {
        "id" : "177"
      }, {
        "id" : "178"
      }, {
        "id" : "180"
      }, {
        "id" : "181"
      }, {
        "id" : "184"
      }, {
        "id" : "187"
      }, {
        "id" : "222"
      }, {
        "id" : "224"
      }, {
        "id" : "229"
      }, {
        "id" : "231"
      } ]
    }, {
      "containerId" : "78",
      "dimensions" : {
        "height" : 2510,
        "width" : 1713
      },
      "elements" : [ {
        "id" : "15",
        "x" : 1035,
        "y" : 165
      }, {
        "id" : "79",
        "x" : 1042,
        "y" : 765
      }, {
        "id" : "80",
        "x" : 292,
        "y" : 765
      }, {
        "id" : "81",
        "x" : 292,
        "y" : 1365
      }, {
        "id" : "82",
        "x" : 1042,
        "y" : 1365
      }, {
        "id" : "88",
        "x" : 199,
        "y" : 1975
      }, {
        "id" : "92",
        "x" : 789,
        "y" : 1975
      } ],
      "externalContainerBoundariesVisible" : false,
      "key" : "icons_service",
      "order" : 5,
      "relationships" : [ {
        "id" : "83"
      }, {
        "id" : "86"
      }, {
        "id" : "87"
      }, {
        "id" : "89"
      }, {
        "id" : "93"
      } ]
    } ],
    "configuration" : {
      "branding" : { },
      "lastSavedView" : "Bitwarden_Server",
      "metadataSymbols" : "SquareBrackets",
      "styles" : {
        "elements" : [ {
          "background" : "#d34407",
          "shape" : "Person",
          "tag" : "Person"
        }, {
          "background" : "#3107d3",
          "shape" : "Person",
          "tag" : "MSP"
        }, {
          "color" : "#3c3b3b",
          "tag" : "Element"
        }, {
          "background" : "#f88728",
          "tag" : "Container"
        }, {
          "shape" : "Pipe",
          "tag" : "Queue"
        }, {
          "shape" : "MobileDevicePortrait",
          "tag" : "Mobile"
        }, {
          "shape" : "WebBrowser",
          "tag" : "Web"
        }, {
          "shape" : "Cylinder",
          "tag" : "Database"
        }, {
          "background" : "#b5b5b5",
          "color" : "#000000",
          "tag" : "External"
        } ]
      },
      "terminology" : { },
      "themes" : [ "https://static.structurizr.com/themes/default/theme.json" ]
    },
    "containerViews" : [ {
      "dimensions" : {
        "height" : 3920,
        "width" : 7158
      },
      "elements" : [ {
        "id" : "2",
        "x" : 279,
        "y" : 2029
      }, {
        "id" : "3",
        "x" : 6612,
        "y" : 2029
      }, {
        "id" : "5",
        "x" : 2490,
        "y" : 1435
      }, {
        "id" : "7",
        "x" : 1740,
        "y" : 1435
      }, {
        "id" : "8",
        "x" : 3990,
        "y" : 1435
      }, {
        "id" : "9",
        "x" : 3990,
        "y" : 2735
      }, {
        "id" : "10",
        "x" : 1910,
        "y" : 2730
      }, {
        "id" : "11",
        "x" : 2932,
        "y" : 3335
      }, {
        "id" : "12",
        "x" : 1435,
        "y" : 2095
      }, {
        "id" : "13",
        "x" : 3149,
        "y" : 2085
      }, {
        "id" : "14",
        "x" : 3899,
        "y" : 2085
      }, {
        "id" : "15",
        "x" : 1595,
        "y" : 829
      }, {
        "id" : "22",
        "x" : 2345,
        "y" : 829
      }, {
        "id" : "23",
        "x" : 435,
        "y" : 830
      }, {
        "id" : "24",
        "x" : 3845,
        "y" : 829
      }, {
        "id" : "26",
        "x" : 3787,
        "y" : 129
      }, {
        "id" : "27",
        "x" : 3000,
        "y" : 2725
      }, {
        "id" : "30",
        "x" : 2140,
        "y" : 2095
      }, {
        "id" : "69",
        "x" : 230,
        "y" : 2725
      }, {
        "id" : "74",
        "x" : 840,
        "y" : 2100
      }, {
        "id" : "75",
        "x" : 2495,
        "y" : 2730
      }, {
        "id" : "76",
        "x" : 3095,
        "y" : 829
      }, {
        "id" : "77",
        "x" : 4504,
        "y" : 2079
      }, {
        "id" : "78",
        "x" : 3240,
        "y" : 1435
      }, {
        "id" : "88",
        "x" : 5254,
        "y" : 2079
      }, {
        "id" : "92",
        "x" : 5254,
        "y" : 2079
      } ],
      "externalSoftwareSystemBoundariesVisible" : false,
      "key" : "Bitwarden_Server",
      "order" : 7,
      "relationships" : [ {
        "id" : "105",
        "vertices" : [ {
          "x" : 5854,
          "y" : 2029
        }, {
          "x" : 5854,
          "y" : 2429
        } ]
      }, {
        "id" : "108",
        "vertices" : [ {
          "x" : 2195,
          "y" : 829
        } ]
      }, {
        "id" : "109",
        "vertices" : [ {
          "x" : 6387,
          "y" : 2429
        } ]
      }, {
        "id" : "111",
        "vertices" : [ {
          "x" : 930,
          "y" : 2640
        }, {
          "x" : 3785,
          "y" : 2660
        } ]
      }, {
        "id" : "115"
      }, {
        "id" : "127",
        "vertices" : [ {
          "x" : 170,
          "y" : 1325
        }, {
          "x" : 170,
          "y" : 1729
        }, {
          "x" : 829,
          "y" : 2029
        } ]
      }, {
        "id" : "133",
        "vertices" : [ {
          "x" : 1724,
          "y" : 2035
        } ]
      }, {
        "id" : "134"
      }, {
        "id" : "135",
        "vertices" : [ {
          "x" : 2999,
          "y" : 2435
        }, {
          "x" : 3532,
          "y" : 2735
        }, {
          "x" : 3532,
          "y" : 3035
        } ]
      }, {
        "id" : "136"
      }, {
        "id" : "137"
      }, {
        "id" : "138"
      }, {
        "id" : "139"
      }, {
        "id" : "140",
        "vertices" : [ {
          "x" : 3749,
          "y" : 2035
        } ]
      }, {
        "id" : "141"
      }, {
        "id" : "142"
      }, {
        "id" : "143"
      }, {
        "id" : "144"
      }, {
        "id" : "146"
      }, {
        "id" : "148"
      }, {
        "id" : "150"
      }, {
        "id" : "165",
        "vertices" : [ {
          "x" : 2135,
          "y" : 2470
        } ]
      }, {
        "id" : "176",
        "vertices" : [ {
          "x" : 2245,
          "y" : 2586
        } ]
      }, {
        "id" : "179"
      }, {
        "id" : "226"
      }, {
        "id" : "240",
        "vertices" : [ {
          "x" : 1760,
          "y" : 3190
        } ]
      }, {
        "id" : "241"
      }, {
        "id" : "243",
        "vertices" : [ {
          "x" : 3038,
          "y" : 1396
        } ]
      }, {
        "id" : "246",
        "vertices" : [ {
          "x" : 2945,
          "y" : 1729
        }, {
          "x" : 4474,
          "y" : 2029
        } ]
      }, {
        "id" : "249",
        "vertices" : [ {
          "x" : 2851,
          "y" : 1161
        } ]
      }, {
        "id" : "251"
      }, {
        "id" : "28"
      }, {
        "id" : "84",
        "vertices" : [ {
          "x" : 2195,
          "y" : 1129
        }, {
          "x" : 2945,
          "y" : 1325
        } ]
      }, {
        "id" : "90",
        "vertices" : [ {
          "x" : 3695,
          "y" : 1729
        }, {
          "x" : 5104,
          "y" : 2029
        } ]
      }, {
        "id" : "94",
        "vertices" : [ {
          "x" : 3695,
          "y" : 1729
        }, {
          "x" : 5104,
          "y" : 2029
        } ]
      } ],
      "softwareSystemId" : "4"
    } ],
    "dynamicViews" : [ {
      "description" : "Event Integrations / ASB Detail",
      "dimensions" : {
        "height" : 2999,
        "width" : 5160
      },
      "elementId" : "10",
      "elements" : [ {
        "id" : "11",
        "x" : 4510,
        "y" : 766
      }, {
        "id" : "31",
        "x" : 1070,
        "y" : 172
      }, {
        "id" : "32",
        "x" : 925,
        "y" : 1239
      }, {
        "id" : "33",
        "x" : 1915,
        "y" : 663
      }, {
        "id" : "34",
        "x" : 229,
        "y" : 663
      }, {
        "id" : "35",
        "x" : 1353,
        "y" : 663
      }, {
        "id" : "36",
        "x" : 791,
        "y" : 663
      }, {
        "id" : "37",
        "x" : 220,
        "y" : 1719
      }, {
        "id" : "38",
        "x" : 1720,
        "y" : 1719
      }, {
        "id" : "39",
        "x" : 970,
        "y" : 1719
      }, {
        "id" : "53",
        "x" : 2710,
        "y" : 671
      }, {
        "id" : "54",
        "x" : 2685,
        "y" : 1161
      }, {
        "id" : "55",
        "x" : 3145,
        "y" : 2106
      }, {
        "id" : "56",
        "x" : 3145,
        "y" : 1761
      }, {
        "id" : "57",
        "x" : 3400,
        "y" : 1021
      }, {
        "id" : "58",
        "x" : 3810,
        "y" : 2106
      }, {
        "id" : "59",
        "x" : 3810,
        "y" : 1761
      }, {
        "id" : "60",
        "x" : 3400,
        "y" : 1399
      }, {
        "id" : "70",
        "x" : 4510,
        "y" : 2451
      }, {
        "id" : "71",
        "x" : 4510,
        "y" : 2001
      }, {
        "id" : "72",
        "x" : 4510,
        "y" : 1623
      }, {
        "id" : "73",
        "x" : 4510,
        "y" : 1246
      } ],
      "externalBoundariesVisible" : false,
      "key" : "Events_Processor_Azure_Service_Bus",
      "order" : 4,
      "relationships" : [ {
        "description" : "Fan-out Subscription",
        "id" : "158",
        "order" : "1",
        "response" : false
      }, {
        "description" : "Fan-out Subscription",
        "id" : "156",
        "order" : "2",
        "response" : false
      }, {
        "description" : "Fan-out Subscription",
        "id" : "157",
        "order" : "3",
        "response" : false
      }, {
        "description" : "Fan-out Subscription",
        "id" : "155",
        "order" : "4",
        "response" : false
      }, {
        "description" : "EventListenerService",
        "id" : "162",
        "order" : "5",
        "response" : false
      }, {
        "description" : "Permanent storage",
        "id" : "181",
        "order" : "6",
        "response" : false
      }, {
        "description" : "EventListenerService",
        "id" : "169",
        "order" : "7",
        "response" : false,
        "vertices" : [ {
          "x" : 460,
          "y" : 1099
        } ]
      }, {
        "description" : "EventListenerService",
        "id" : "166",
        "order" : "8",
        "response" : false,
        "vertices" : [ {
          "x" : 1030,
          "y" : 1044
        } ]
      }, {
        "description" : "EventListenerService",
        "id" : "171",
        "order" : "9",
        "response" : false,
        "vertices" : [ {
          "x" : 1580,
          "y" : 1014
        } ]
      }, {
        "description" : "Publishes To",
        "id" : "173",
        "order" : "10",
        "response" : false
      }, {
        "description" : "Fetches configurations from",
        "id" : "177",
        "order" : "11",
        "response" : false
      }, {
        "description" : "Fetches configurations from",
        "id" : "178",
        "order" : "12",
        "response" : false
      }, {
        "description" : "Runs filters",
        "id" : "180",
        "order" : "13",
        "response" : false
      }, {
        "description" : "Subscription filtered via Slack key",
        "id" : "159",
        "order" : "14",
        "response" : false
      }, {
        "description" : "Subscription filtered via HEC key",
        "id" : "161",
        "order" : "15",
        "response" : false
      }, {
        "description" : "Subscription filtered via Webhook key",
        "id" : "160",
        "order" : "16",
        "response" : false
      }, {
        "description" : "IntegrationListenerService",
        "id" : "182",
        "order" : "17",
        "response" : false,
        "vertices" : [ {
          "x" : 445,
          "y" : 2262
        } ]
      }, {
        "description" : "IntegrationListenerService",
        "id" : "185",
        "order" : "18",
        "response" : false
      }, {
        "description" : "IntegrationListenerService",
        "id" : "188",
        "order" : "19",
        "response" : false,
        "vertices" : [ {
          "x" : 2180,
          "y" : 2172
        } ]
      }, {
        "description" : "Uses",
        "id" : "222",
        "order" : "20",
        "response" : false
      }, {
        "description" : "Publishes configured events to",
        "id" : "223",
        "order" : "21",
        "response" : false
      }, {
        "description" : "Uses",
        "id" : "229",
        "order" : "22",
        "response" : false
      }, {
        "description" : "Publishes configured events to",
        "id" : "230",
        "order" : "23",
        "response" : false
      }, {
        "description" : "Publishes configured events to",
        "id" : "234",
        "order" : "24",
        "response" : false
      }, {
        "description" : "Publishes configured events to",
        "id" : "237",
        "order" : "25",
        "response" : false
      } ]
    } ],
    "systemLandscapeViews" : [ {
      "dimensions" : {
        "height" : 2820,
        "width" : 4433
      },
      "elements" : [ {
        "id" : "1",
        "x" : 2425,
        "y" : 208
      }, {
        "id" : "2",
        "x" : 208,
        "y" : 908
      }, {
        "id" : "3",
        "x" : 908,
        "y" : 908
      }, {
        "id" : "4",
        "x" : 1635,
        "y" : 1605
      }, {
        "id" : "15",
        "x" : 3110,
        "y" : 960
      }, {
        "id" : "22",
        "x" : 2358,
        "y" : 958
      }, {
        "id" : "23",
        "x" : 1608,
        "y" : 958
      }, {
        "id" : "24",
        "x" : 3195,
        "y" : 2210
      }, {
        "id" : "25",
        "x" : 3125,
        "y" : 208
      }, {
        "id" : "26",
        "x" : 3825,
        "y" : 208
      }, {
        "id" : "69",
        "x" : 265,
        "y" : 2215
      }, {
        "id" : "76",
        "x" : 1633,
        "y" : 2210
      }, {
        "id" : "77",
        "x" : 883,
        "y" : 2210
      }, {
        "id" : "88",
        "x" : 2383,
        "y" : 2210
      }, {
        "id" : "92",
        "x" : 2383,
        "y" : 2210
      } ],
      "enterpriseBoundaryVisible" : true,
      "key" : "Bitwarden",
      "order" : 6,
      "paperSize" : "A3_Landscape",
      "relationships" : [ {
        "id" : "104"
      }, {
        "id" : "106",
        "vertices" : [ {
          "x" : 3708,
          "y" : 1308
        } ]
      }, {
        "id" : "108"
      }, {
        "id" : "110"
      }, {
        "id" : "112",
        "vertices" : [ {
          "x" : 729,
          "y" : 1308
        } ]
      }, {
        "id" : "145"
      }, {
        "id" : "228"
      }, {
        "id" : "244",
        "vertices" : [ {
          "x" : 1708,
          "y" : 2058
        } ]
      }, {
        "id" : "247"
      }, {
        "id" : "250",
        "vertices" : [ {
          "x" : 2008,
          "y" : 2058
        } ]
      }, {
        "id" : "252"
      }, {
        "id" : "29"
      }, {
        "id" : "85",
        "vertices" : [ {
          "x" : 2958,
          "y" : 1308
        } ]
      }, {
        "id" : "91"
      }, {
        "id" : "95"
      }, {
        "id" : "97"
      } ]
    } ]
  }
}