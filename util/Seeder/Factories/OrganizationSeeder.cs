using Bit.Core.Billing.Enums;
using Bit.Core.Enums;
using Bit.Core.Models.Data;
using Bit.Core.Utilities;
using Bit.Infrastructure.EntityFramework.AdminConsole.Models;
using Bit.Infrastructure.EntityFramework.Models;

namespace Bit.Seeder.Factories;

public class OrganizationSeeder
{
    public static Organization CreateEnterprise(string name, string domain, int seats)
    {
        return new Organization
        {
            Id = Guid.NewGuid(),
            Name = name,
            BillingEmail = $"billing@{domain}",
            Plan = "Enterprise (Annually)",
            PlanType = PlanType.EnterpriseAnnually,
            Seats = seats,

            // Currently hardcoded to the values from https://github.com/bitwarden/sdk-internal/blob/main/crates/bitwarden-core/src/client/test_accounts.rs.
            // TODO: These should be dynamically generated by the SDK.
            PublicKey = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmIJbGMk6eZqVE7UxhZ46Weu2jKciqOiOkSVYtGvs61rfe9AXxtLaaZEKN4d4DmkZcF6dna2eXNxZmb7U4pwlttye8ksqISe6IUAZQox7auBpjopdCEPhKRg3BD/u8ks9UxSxgWe+fpebjt6gd5hsl1/5HOObn7SeU6EEU04cp3/eH7a4OTdXxB8oN62HGV9kM/ubM1goILgjoSJDbihMK0eb7b8hPHwcA/YOgKKiu/N3FighccdSMD5Pk+HfjacsFNZQa2EsqW09IvvSZ+iL6HQeZ1vwc/6TO1J7EOfJZFQcjoEL9LVI693efYoMZSmrPEWziZ4PvwpOOGo6OObyMQIDAQAB",
            PrivateKey = "2.6FggyKVyaKQsfohi5yqgbg==|UU2JeafOB41L5UscGmf4kq15JGDf3Bkf67KECiehTODzbWctVLTgyDk0Qco8/6CMN6nZGXjxR2A4r5ExhmwRNsNxd77G+MprkmiJz+7w33ROZ1ouQO5XjD3wbQ3ssqNiTKId6yAUPBvuAZRixVApauTuADc8QWGixqCQcqZzmU7YSBBIPf652/AEYr4Tk64YihoE39pHiK8MRbTLdRt3EF4LSMugPAPM24vCgUv3w1TD3Fj6sDg/6oi3flOV9SJZX4vCiUXbDNEuD/p2aQrEXVbaxweFOHjTe7F4iawjXw3nG3SO8rUBHcxbhDDVx5rjYactbW5QvHWiyla6uLb6o8WHBneg2EjTEwAHOZE/rBjcqmAJb2sVp1E0Kwq8ycGmL69vmqJPC1GqVTohAQvmEkaxIPpfq24Yb9ZPrADA7iEXBKuAQ1FphFUVgJBJGJbd60sOV1Rz1T+gUwS4wCNQ4l3LG1S22+wzUVlEku5DXFnT932tatqTyWEthqPqLCt6dL1+qa94XLpeHagXAx2VGe8n8IlcADtxqS+l8xQ4heT12WO9kC316vqvg1mnsI56faup9hb3eT9ZpKyxSBGYOphlTWfV1Y/v64f5PYvTo4aL0IYHyLY/9Qi72vFmOpPeHBYgD5t3j+H2CsiU1PkYsBggOmD7xW8FDuT6HWVvwhEJqeibVPK0Lhyj6tgvlSIAvFUaSMFPlmwFNmwfj/AHUhr9KuTfsBFTZ10yy9TZVgf+EofwnrxHBaWUgdD40aHoY1VjfG33iEuajb6buxG3pYFyPNhJNzeLZisUKIDRMQpUHrsE22EyrFFran3tZGdtcyIEK4Q1F0ULYzJ6T9iY25/ZgPy3pEAAMZCtqo3s+GjX295fWIHfMcnjMgNUHPjExjWBHa+ggK9iQXkFpBVyYB1ga/+0eiIhiek3PlgtvpDrqF7TsLK+ROiBw2GJ7uaO3EEXOj2GpNBuEJ5CdodhZkwzhwMcSatgDHkUuNVu0iVbF6/MxVdOxWXKO+jCYM6PZk/vAhLYqpPzu2T2Uyz4nkDs2Tiq61ez6FoCrzdHIiyIxVTzUQH8G9FgSmtaZ7GCbqlhnurYgcMciwPzxg0hpAQT+NZw1tVEii9vFSpJJbGJqNhORKfKh/Mu1P/9LOQq7Y0P2FIR3x/eUVEQ7CGv2jVtO5ryGSmKeq/P9Fr54wTPaNiqN2K+leACUznCdUWw8kZo/AsBcrOe4OkRX6k8LC3oeJXy06DEToatxEvPYemUauhxiXRw8nfNMqc4LyJq2bbT0zCgJHoqpozPdNg6AYWcoIobgAGu7ZQGq+oE1MT3GZxotMPe/NUJiAc5YE9Thb5Yf3gyno71pyqPTVl/6IQuh4SUz7rkgwF/aVHEnr4aUYNoc0PEzd2Me0jElsA3GAneq1I/wngutOWgTViTK4Nptr5uIzMVQs9H1rOMJNorP8b02t1NDu010rSsib9GaaJJq4r4iy46laQOxWoU0ex26arYnk+jw4833WSCTVBIprTgizZ+fKjoY0xwXvI2oOvGNEUCtGFvKFORTaQrlaXZIg1toa2BBVNicyONbwnI3KIu3MgGJ2SlCVXJn8oHFppVHFCdwgN1uDzGiKAhjvr0sZTUtXin2f2CszPTbbo=|fUhbVKrr8CSKE7TZJneXpDGraj5YhRrq9ESo206S+BY=",
        };
    }
}

public static class OrgnaizationExtensions
{
    public static OrganizationUser CreateOrganizationUser(this Organization organization, User user)
    {
        return new OrganizationUser
        {
            Id = Guid.NewGuid(),
            OrganizationId = organization.Id,
            UserId = user.Id,

            Key = "4.rY01mZFXHOsBAg5Fq4gyXuklWfm6mQASm42DJpx05a+e2mmp+P5W6r54WU2hlREX0uoTxyP91bKKwickSPdCQQ58J45LXHdr9t2uzOYyjVzpzebFcdMw1eElR9W2DW8wEk9+mvtWvKwu7yTebzND+46y1nRMoFydi5zPVLSlJEf81qZZ4Uh1UUMLwXz+NRWfixnGXgq2wRq1bH0n3mqDhayiG4LJKgGdDjWXC8W8MMXDYx24SIJrJu9KiNEMprJE+XVF9nQVNijNAjlWBqkDpsfaWTUfeVLRLctfAqW1blsmIv4RQ91PupYJZDNc8nO9ZTF3TEVM+2KHoxzDJrLs2Q==",
            Type = OrganizationUserType.Admin,
            Status = OrganizationUserStatusType.Confirmed
        };
    }

    public static (List<User>, List<OrganizationUser>) CreateUsersWithDomainDistribution(this Organization organization, int userCount)
    {
        var claimedDomains = new[] { "example1.com", "example2.com", "example3.com" };
        var unclaimedDomains = new[] { "example4.com", "example5.com", "example6.com" };

        var users = new List<User>();
        var orgUsers = new List<OrganizationUser>();

        // Create sample custom permissions for Custom user types
        var customPermissions = new Permissions
        {
            AccessEventLogs = true,
            AccessImportExport = false,
            AccessReports = true,
            CreateNewCollections = true,
            EditAnyCollection = false,
            DeleteAnyCollection = false,
            ManageGroups = false,
            ManagePolicies = false,
            ManageSso = false,
            ManageUsers = false,
            ManageResetPassword = false,
            ManageScim = false
        };

        var customPermissionsJson = CoreHelpers.ClassToJsonData(customPermissions);

        for (var i = 0; i < userCount; i++)
        {
            // 80% users have claimed domains, 20% have unclaimed domains
            var useClaimedDomain = i < (userCount * 0.8);
            string userDomain;

            if (useClaimedDomain)
            {
                userDomain = claimedDomains[i % claimedDomains.Length];
            }
            else
            {
                userDomain = unclaimedDomains[i % unclaimedDomains.Length];
            }

            var user = new User
            {
                Id = Guid.NewGuid(),
                Name = $"User {i}",
                Email = $"user{i}@{userDomain}",
                ApiKey = "TEST",
                SecurityStamp = "stamp",
                CreationDate = DateTime.UtcNow,
                RevisionDate = DateTime.UtcNow,
                AccountRevisionDate = DateTime.UtcNow
            };
            users.Add(user);

            // Create OrganizationUser with mixed types to test the optimization
            var orgUser = organization.CreateOrganizationUser(user);
            orgUser.Permissions = customPermissionsJson;

            // Distribute user types: 50% Custom, 50% mixed other types
            var userTypeDistribution = i % 2;
            if (userTypeDistribution == 0) // 50% Custom users
            {
                orgUser.Type = OrganizationUserType.Custom;
            }
            else // 50% other types
            {
                var otherTypeDistribution = i % 6;
                if (otherTypeDistribution < 2) // ~17% Admin users
                {
                    orgUser.Type = OrganizationUserType.Admin;
                }
                else if (otherTypeDistribution < 5) // ~25% User type
                {
                    orgUser.Type = OrganizationUserType.User;
                }
                else // ~8% Owner type
                {
                    orgUser.Type = OrganizationUserType.Owner;
                }
            }

            orgUsers.Add(orgUser);
        }

        return (users, orgUsers);
    }

    public static List<OrganizationDomain> CreateOrganizationDomains(this Organization organization)
    {
        var claimedDomains = new[] { "example1.com", "example2.com", "example3.com" };
        var organizationDomains = new List<OrganizationDomain>();

        foreach (var claimedDomain in claimedDomains)
        {
            var orgDomain = new OrganizationDomain
            {
                Id = Guid.NewGuid(),
                OrganizationId = organization.Id,
                DomainName = claimedDomain,
                Txt = $"bw={CoreHelpers.RandomString(44)}",
                CreationDate = DateTime.UtcNow
            };
            orgDomain.SetNextRunDate(12);
            orgDomain.SetVerifiedDate(); // Mark as claimed/verified
            orgDomain.SetJobRunCount();
            organizationDomains.Add(orgDomain);
        }

        return organizationDomains;
    }

    public static List<Collection> CreateCollections(this Organization organization)
    {
        var collectionNames = new[]
        {
            "Engineering",
            "Marketing",
            "Sales",
            "HR",
            "Finance",
            "Legal",
            "Operations",
            "Customer Support",
            "Product",
            "Design"
        };

        return collectionNames.Select(name => new Collection
        {
            Id = Guid.NewGuid(),
            OrganizationId = organization.Id,
            Name = name,
            CreationDate = DateTime.UtcNow,
            RevisionDate = DateTime.UtcNow
        }).ToList();
    }

    public static List<Group> CreateGroups(this Organization organization)
    {
        var groupNames = new[]
        {
            "Administrators",
            "Team Leads",
            "Senior Engineers",
            "Junior Engineers",
            "Marketing Team",
            "Sales Team",
            "HR Team",
            "Finance Team"
        };

        return groupNames.Select(name => new Group
        {
            Id = Guid.NewGuid(),
            OrganizationId = organization.Id,
            Name = name
        }).ToList();
    }
}
